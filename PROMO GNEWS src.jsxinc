/*

---------------------------------------------------------------
# general functions
---------------------------------------------------------------

*/

//  linter settings:
//  jshint -W061
//  jshint -W085

function netAccess() {
  
  var prefSection = 'Main Pref Section';
  var prefName = 'Pref_SCRIPTING_FILE_NETWORK_SECURITY';

  return app.preferences.getPrefAsLong(prefSection, prefName);
}

function getTempFld() {

  try {
    var tempFld = new Folder(scriptPreferencesPath + '/temp');

    if (!tempFld.exists) {
      tempFld.create();
    }
    return tempFld.fullName;

  } catch (err) {
    alert('can\'t find temp folder');
  }
}

function createPresetFile(tempFld, fileName, binStr) {

  try {
    var myFile = new File(tempFld + '/' + fileName);

    myFile.encoding = 'BINARY';
    myFile.open('w');
    myFile.write(binStr);
    myFile.close();

    return myFile;

  } catch (err) {}
}

function addPseudoEffect(aLayer, fxMatchName, fxName, binStr) {

  var fx = {
    matchName: fxMatchName,
    presetName: fxName,
    presetBinary: [binStr]
  };
  var tempFld = getTempFld();
  var aPreset = createPresetFile(tempFld, fx.presetName, fx.presetBinary);

  aLayer.applyPreset(File(aPreset));

  return tempFld;
}

// open url...
function openWebSite(url) {

  var os = $.os;
  var appOs = (os.indexOf('Win') != -1) ? 'Win' : 'Mac';

  if (appOs == 'Win') {
    system.callSystem('explorer ' + url);

  } else {
    system.callSystem('open ' + url);
  }
}

// open system folder...
function openFolder(folderPath) {

  var os = $.os;
  var appOs = (os.indexOf('Win') != -1) ? 'Win' : 'Mac';
  
  var folder = Folder(folderPath);
  
  if (appOs == 'Win') {
    system.callSystem('explorer ' + Folder.decode(folder.fsName));
  
  } else {
    system.callSystem('open "' + Folder.decode(folder.fsName) + '"');
  }
}

// cria shape layers (shp_nulls e adj_layers)..
function createShp(shpType) {

  var aItem = app.project.activeItem;
  var shpLayer = aItem.layers.addShape();
  var shpGroup = shpLayer.property('ADBE Root Vectors Group');
  var shpRect = shpGroup.addProperty('ADBE Vector Shape - Rect');
  var expStr = '[thisComp.width, thisComp.height];';
  var redStr = '[0.725, 0.078, 0.078, 1];';

  switch (shpType) {

    case(0):
      shpRect.name = 'adjustment';
      shpRect.property('ADBE Vector Rect Size').setValue([aItem.width, aItem.height]);
      shpRect.property('ADBE Vector Rect Size').expression = expStr;

      var shpFill = shpGroup.addProperty('ADBE Vector Graphic - Fill');
      shpFill.property('ADBE Vector Fill Color').setValue([1, 1, 1, 1]);
      shpFill.name = 'fill';
      break;

    case(1):
      shpRect.name = 'null';
      shpRect.property('ADBE Vector Rect Size').setValue([100, 100]);
      break;

    case(2):
      shpRect.name = 'pallet';
      shpRect.property('ADBE Vector Rect Size').setValue([50, 50]);

      var palletFill = shpGroup.addProperty('ADBE Vector Graphic - Fill');
      palletFill.property('ADBE Vector Fill Color').setValue([0.725, 0.078, 0.078, 1]);
      palletFill.property('ADBE Vector Fill Color').expression = redStr;

      palletFill.name = 'GNEWS RED';
      break;
  
    }

  return shpLayer;
}

function colorPallet() {

  var rootVGrp = 'ADBE Root Vectors Group';
  var vGrp = 'ADBE Vector Group';
  var vsGrp = 'ADBE Vectors Group';

  var redStr = '[0.725, 0.078, 0.078, 1];';
  var blkStr = '[0.078, 0.078, 0.078, 1];';
  var wteStr = '[0.8, 0.8, 0.8, 1];';

  var aItem = app.project.activeItem;
  var shpLayer = aItem.layers.addShape();
  var contents = shpLayer.property(rootVGrp);

  var redGrp = contents.addProperty(vGrp);
  var redShp = redGrp.property(vsGrp).addProperty('ADBE Vector Shape - Rect');
  redShp.property('ADBE Vector Rect Size').setValue([50,50]);
  var redFill = redGrp.property(vsGrp).addProperty('ADBE Vector Graphic - Fill');
  redFill.property('ADBE Vector Fill Color').setValue([0.725, 0.078, 0.078, 1]);
  redFill.property('ADBE Vector Fill Color').expression = redStr;
  redGrp.property('ADBE Vector Transform Group').position.setValue([60,60]);
  redGrp.name = 'RED';
  redFill.name = 'GNEWS RED';

  var blkGrp = contents.addProperty(vGrp);
  var blkShp = blkGrp.property(vsGrp).addProperty('ADBE Vector Shape - Rect');
  blkShp.property('ADBE Vector Rect Size').setValue([50,50]);
  var blkFill = blkGrp.property(vsGrp).addProperty('ADBE Vector Graphic - Fill');
  blkFill.property('ADBE Vector Fill Color').setValue([0.078, 0.078, 0.078, 1]);
  blkFill.property('ADBE Vector Fill Color').expression = blkStr;
  blkGrp.property('ADBE Vector Transform Group').position.setValue([120,60]);
  blkGrp.name = 'BLACK';
  blkFill.name = 'GNEWS BLACK';

  var wteGrp = contents.addProperty(vGrp);
  var wteShp = wteGrp.property(vsGrp).addProperty('ADBE Vector Shape - Rect');
  wteShp.property('ADBE Vector Rect Size').setValue([50,50]);
  var wteFill = wteGrp.property(vsGrp).addProperty('ADBE Vector Graphic - Fill');
  wteFill.property('ADBE Vector Fill Color').setValue([0.8, 0.8, 0.8, 1]);
  wteFill.property('ADBE Vector Fill Color').expression = wteStr;
  wteGrp.property('ADBE Vector Transform Group').position.setValue([180,60]);
  wteGrp.name = 'WHITE';
  wteFill.name = 'GNEWS WHITE';

  return shpLayer;
}

function shpArrow(body, head) {

  var rootVGrp = 'ADBE Root Vectors Group';
  var vGrp = 'ADBE Vector Group';
  var vsGrp = 'ADBE Vectors Group';
  var exp = '';

  var shpLayer = app.project.activeItem.layers.addShape(); 
  var contents = shpLayer.property(rootVGrp);

  // body
  var bodyGrp = contents.addProperty(vGrp);
  var bodyShp = bodyGrp.property(vsGrp).addProperty('ADBE Vector Shape - Group');
  bodyShp.property('ADBE Vector Shape').setValue(body);
  bodyShp.name = 'body path';
  var bodyStk = bodyGrp.property(vsGrp).addProperty('ADBE Vector Graphic - Stroke');
  exp = 'effect("arrow rig")("body stroke size").value;';
  bodyStk.property('ADBE Vector Stroke Width').expression = exp;
  bodyStk.property('ADBE Vector Stroke Line Cap').setValue(2);
  exp = 'effect("arrow rig")("color").value;';
  bodyStk.property('ADBE Vector Stroke Color').expression = exp;
  exp = 'value * effect("arrow rig")("show body").value;';
  bodyGrp.property('ADBE Vector Transform Group').opacity.expression = exp;
  bodyGrp.name = 'body';

  // round corners
  var roundCorners = contents.addProperty('ADBE Vector Filter - RC');
  exp = 'effect("arrow rig")("round corners").value;';
  roundCorners.property('ADBE Vector RoundCorner Radius').expression = exp;

  // trim paths
  var trimPath = contents.addProperty('ADBE Vector Filter - Trim');
  exp = 'effect("arrow rig")("path").value;';
  trimPath.property('ADBE Vector Trim End').expression = exp;

  // head
  var headGrp = contents.addProperty(vGrp);
  var headShp = headGrp.property(vsGrp).addProperty('ADBE Vector Shape - Group');
  headShp.property('ADBE Vector Shape').setValue(head);
  headShp.name = 'head path';
  var headStk = headGrp.property(vsGrp).addProperty('ADBE Vector Graphic - Stroke');
  exp = 'var w = effect("arrow rig")("head stroke size").value;\n';
  exp += 'var s = effect("arrow rig")("head scale").value / 100;\n\n';
  exp += 'w / s;';
  headStk.property('ADBE Vector Stroke Width').expression = exp;
  headStk.property('ADBE Vector Stroke Line Cap').setValue(2);
  exp = 'effect("arrow rig")("color").value;';
  headStk.property('ADBE Vector Stroke Color').expression = exp;
  exp = 'var progress = content("Trim Paths 1").end / 100;\n';
  exp += 'var pathShp = content("body").content("body path").path;\n\n';
  exp += 'pathShp.pointOnPath(progress);';
  headGrp.property('ADBE Vector Transform Group').position.expression = exp;
  exp = 'var s = effect("arrow rig")("head scale").value;\n\n';
  exp += '[s, s];';
  headGrp.property('ADBE Vector Transform Group').scale.expression = exp;
  exp = 'var orientChk = effect("arrow rig")("auto orient").value;\n';
  exp += 'var pathShp = content("body").content("body path").path;\n';
  exp += 'var progress = content("Trim Paths 1").end / 100;\n';
  exp += 'var pathTan = pathShp.tangentOnPath(progress);\n\n';
  exp += 'value + (radiansToDegrees(Math.atan2(pathTan[1],pathTan[0])) * orientChk);';
  headGrp.property('ADBE Vector Transform Group').rotation.expression = exp;
  exp = 'value * effect("arrow rig")("show head").value;';
  headGrp.property('ADBE Vector Transform Group').opacity.expression = exp;
  headGrp.name = 'head';

  return shpLayer;
}

function logoShp() {

  var globoShape1 = new Shape();
  globoShape1.vertices = [[-44.875,0],[0,-44.625],[44.875,0],[0,44.625]];
  globoShape1.inTangents = [[0,24.5625],[-24.875,0],[0,-24.5625],[24.875,0]];
  globoShape1.outTangents = [[0,-24.5625],[24.875,0],[0,24.5625],[-24.875,0]];
  globoShape1.closed = true;
  
  var globoShape2 = new Shape();
  globoShape2.vertices = [[86.75,-42.125],[75.3125,-52],[0,-55.0625],[-75.3125,-52],[-86.75,-42.125],[-88.1875,0],[-86.75,42.125],[-75.3125,52],[0,55.0625],[75.3125,52],[86.75,42.125],[88.1875,0]];
  globoShape2.inTangents = [[1.375,13.6875],[6.9375,0.75],[24.8125,-0.0625],[23.9375,-2.5],[0.75,-7.4375],[0,-14.3125],[-1.375,-13.6875],[-6.9375,-0.75],[-24.8125,0.0625],[-23.9375,2.5],[-0.75,7.4375],[0,14.3125]];
  globoShape2.outTangents = [[-0.75,-7.4375],[-23.9375,-2.5],[-24.8125,-0.0625],[-6.9375,0.75],[-1.375,13.6875],[0,14.3125],[0.75,7.4375],[23.9375,2.5],[24.8125,0.0625],[6.9375,-0.75],[1.375,-13.6875],[0,-14.3125]];
  globoShape2.closed = true;
  
  var globoShape3 = new Shape();
  globoShape3.vertices = [[110.5,0],[0,110.1875],[-110.5,0],[0,-110.1875]];
  globoShape3.inTangents = [[0,-60.6875],[61,0],[0,60.6875],[-61,0]];
  globoShape3.outTangents = [[0,60.6875],[-61,0],[0,-60.6875],[61,0]];
  globoShape3.closed = true;
  
  var newsShape1 = new Shape();
  newsShape1.vertices = [[-65.1875,50.8125],[-167.1875,50.8125],[-167.1875,28.3125],[-88.1875,28.3125],[-88.1875,-21.8125],[-167.1875,-21.8125],[-167.1875,-44.3125],[-65.1875,-44.3125]];
  newsShape1.inTangents = [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]];
  newsShape1.outTangents = [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]];
  newsShape1.closed = true;
  
  var newsShape2 = new Shape();
  newsShape2.vertices = [[301.5625,-18.875],[242.75,-44.4375],[257.25,-55],[273.0625,-50.875],[280.375,-38.3125],[280.375,-38.3125],[280.375,-38.3125],[350.0625,-38.3125],[249.75,-102],[177.0625,-102],[124.3125,-5.0625],[124.3125,-102],[58,-102],[-3.375,10.625],[-3.375,-102],[-235.125,-102],[-235.125,-13.125],[-283.4375,-102],[-358.375,-102],[-358.375,108.4375],[-288.625,108.4375],[-288.625,15.9375],[-236.6875,108.4375],[-2.6875,108.4375],[58.0625,1],[58.0625,108.4375],[126.0625,108.4375],[188.5625,-2.75],[243,22.125],[285.125,44.5],[265.1875,59.5625],[248.5625,46.9375],[247.125,37.75],[169.3125,37.75],[264.9375,109.4375],[358.375,39.625]];
  newsShape2.inTangents = [[28.6875,7.9375],[1.125,14.5],[-6.625,0],[-4.0625,-2.6875],[-0.0625,-5.75],[0,0],[0,0],[0,0],[48.0625,-7.5],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-19.875,-5.625],[0,-10.125],[6.6875,0],[3,8],[0,4.3125],[0,0],[-22.875,0],[0,52.8125]];
  newsShape2.outTangents = [[-28.6875,-7.9375],[0.0625,-8.8125],[4.875,0],[4.1875,2.8125],[0,0],[0,0],[0,0],[-1.4375,-49.75],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[12.9375,13.6875],[33.625,9.5625],[0,9.875],[-7.625,0],[-0.75,-2],[0,0],[1.375,63.625],[45.125,0],[0,-37.1875]];
  newsShape2.closed = true;
  
  var rootVGrp = 'ADBE Root Vectors Group';
  var vGrp = 'ADBE Vector Group';
  var vsGrp = 'ADBE Vectors Group';
  
  var shpLayer = app.project.activeItem.layers.addShape(); 
  var contents = shpLayer.property(rootVGrp);
  
  // globo
  var globoGrp = contents.addProperty(vGrp);
  var globoShp1 = globoGrp.property(vsGrp).addProperty('ADBE Vector Shape - Group');
  globoShp1.property('ADBE Vector Shape').setValue(globoShape1);
  var globoShp2 = globoGrp.property(vsGrp).addProperty('ADBE Vector Shape - Group');
  globoShp2.property('ADBE Vector Shape').setValue(globoShape2);
  var globoShp3 = globoGrp.property(vsGrp).addProperty('ADBE Vector Shape - Group');
  globoShp3.property('ADBE Vector Shape').setValue(globoShape3);
  
  var globoFill = globoGrp.property(vsGrp).addProperty('ADBE Vector Graphic - Fill');
  globoFill.property('ADBE Vector Fill Color').setValue(GNEWS_RED);
  globoGrp.property('ADBE Vector Transform Group').position.setValue([-350,0]);
  globoGrp.name = 'globo';
  
  // news
  var newsGrp = contents.addProperty(vGrp);
  var newsShp1 = newsGrp.property(vsGrp).addProperty('ADBE Vector Shape - Group');
  newsShp1.property('ADBE Vector Shape').setValue(newsShape1);
  var newsShp2 = newsGrp.property(vsGrp).addProperty('ADBE Vector Shape - Group');
  newsShp2.property('ADBE Vector Shape').setValue(newsShape2);
  
  var newsFill = newsGrp.property(vsGrp).addProperty('ADBE Vector Graphic - Fill');
  newsFill.property('ADBE Vector Fill Color').setValue(GNEWS_RED);
  newsGrp.property('ADBE Vector Transform Group').position.setValue([100,0]);
  newsGrp.name = 'news';
  
  shpLayer.name = 'GNEWS logo';
}

// reposiciona e parenteia um layer mantendo a hierarquia...
function setHierarchy(selLayer, ctrlLayer) {

  var trmProp = 'ADBE Transform Group';
  var posProp = 'ADBE Position';
  var selLayerTrm = selLayer.property(trmProp);
  var selLayerPos = selLayerTrm.property(posProp);
  var ctrlLayerTrm = ctrlLayer.property(trmProp);
  var ctrlLayerPos = ctrlLayerTrm.property(posProp);

  if (selLayer.parent != null) {
    ctrlLayer.parent = selLayer.parent;
  }
  if (selLayer.threeDLayer || selLayer instanceof LightLayer) {
    ctrlLayer.threeDLayer = true;
  }
  ctrlLayerPos.setValue(selLayerPos.value);

  if (selLayer instanceof CameraLayer) {
    ctrlLayer.threeDLayer = true;
  }
  selLayer.parent = ctrlLayer;

  for (i = 1; i <= selLayerTrm.numProperties; i++) {

    if (selLayerTrm.property(i).dimensionsSeparated) {
      ctrlLayerTrm.property(i).dimensionsSeparated = true;
    }
  }
}

function chkArray(aArray, aElement) {

  var chk = true;

  for (i = 0; i < aArray.length; i++) {

    if (aArray[i] == aElement) {
      chk = false;
      break;
    }
  }

  return chk;
}

function chkDep() {

  var itemSelection = false;
  var layerSelection = false;
  var projectItens = false;

  if (app.project.numItems > 0) {
    var aItem = app.project.activeItem;
    projectItens = true;

    if (aItem != undefined) {
      var selLayers = aItem.selectedLayers;
      itemSelection = true;

      if (selLayers != false) {
        layerSelection = true;
      }
    }
  }
  return [projectItens, itemSelection, layerSelection];
}

// lock transform properties
function lockTrmProp(selLayer) {

  var trmProp = 'ADBE Transform Group';
  var selLayerTrm = selLayer.property(trmProp);
  var expStr = '';

  for (p = 1; p <= selLayerTrm.numProperties; p++) {
    var prop = selLayerTrm.property(p);

    if (prop.canSetExpression) {

      if (prop.expression == '' && prop.numKeys == 0) {
        var val = prop.value;

        if (val.length > 0) {
          expStr = '// locked\n[' + val.toString() + '];';
        } else {
          expStr = '// locked\n' + val.toString() + ';';
        }
        prop.expression = expStr;
      }
    }
  }
}

// clone expressions...
function cloneExpressions(selLayer, ctrlLayer) {

  var trmProp = 'ADBE Transform Group';
  var posProp = 'ADBE Position';
  var opaProp = 'ADBE Opacity';
  var selLayerTrm = selLayer.property(trmProp);
  var ctrlLayerTrm = ctrlLayer.property(trmProp);
  selLayer.parent = ctrlLayer.parent;

  for (p = 1; p <= selLayerTrm.numProperties; p++) {
    var selLayerProp = selLayerTrm.property(p);
    var ctrlLayerProp = ctrlLayerTrm.property(p);

    if (selLayerProp.expression != '' && selLayerProp.matchName != opaProp) {
      var expStr = selLayerProp.expression;
      selLayerProp.expression = '';

      try {
        ctrlLayerProp.setValue(selLayerProp.value);

      } catch (err) {}
      ctrlLayerTrm.property(p).expression = expStr;

      if (selLayerProp.matchName == posProp) {
        selLayerProp.setValue(ctrlLayerProp.value);
      }
    }
  }
  selLayer.parent = ctrlLayer;
}

// set keyframe properties...
function setKeys(selLayerProp, ctrlLayerProp) {

  for (k = 1; k <= selLayerProp.numKeys; k++) {

    var t = selLayerProp.keyTime(k);
    var v = selLayerProp.keyValue(k);
    ctrlLayerProp.setValueAtTime(t, v);

    var tInTArray = selLayerProp.keyInTemporalEase(k);
    var tOutTArray = selLayerProp.keyOutTemporalEase(k);
    ctrlLayerProp.setTemporalEaseAtKey(k, tInTArray, tOutTArray);

    var kInIType = selLayerProp.keyInInterpolationType(k);
    var kOutIType = selLayerProp.keyOutInterpolationType(k);
    ctrlLayerProp.setInterpolationTypeAtKey(k, kInIType, kOutIType);

    if (selLayerProp.isSpatial) {
      var kInSArray = selLayerProp.keyInSpatialTangent(k);
      var kOutSArray = selLayerProp.keyOutSpatialTangent(k);
      ctrlLayerProp.setSpatialTangentsAtKey(k, kInSArray, kOutSArray);
      var ct = selLayerProp.keySpatialContinuous(k);
      ctrlLayerProp.setSpatialContinuousAtKey(k, ct);
    }
  }
}

// clone keyframes...
function cloneKeys(selLayer, ctrlLayer) {

  var trmProp = 'ADBE Transform Group';
  var opaProp = 'ADBE Opacity';

  var selLayerTrm = selLayer.property(trmProp);
  var ctrlLayerTrm = ctrlLayer.property(trmProp);

  selLayer.parent = ctrlLayer.parent;

  for (p = 1; p <= selLayerTrm.numProperties; p++) {
    var selLayerProp = selLayerTrm.property(p);
    var ctrlLayerProp = ctrlLayerTrm.property(p);

    if (selLayerProp.numKeys != 0 && selLayerProp.matchName != opaProp) {

      if (selLayerProp.dimensionsSeparated) {
        ctrlLayerProp.dimensionsSeparated = true;

        for (d = 0; d < selLayerProp.value.length; d++) {
          var selLayerPropD = selLayerProp.getSeparationFollower(d);
          var ctrlLayerPropD = ctrlLayerProp.getSeparationFollower(d);
          setKeys(selLayerPropD, ctrlLayerPropD);
        }
      } else {
        setKeys(selLayerProp, ctrlLayerProp);
      }
      for (k = 1; k <= ctrlLayerProp.numKeys; k++) {
        selLayerProp.removeKey(1);
      }
      try {
        selLayerProp.setValue(ctrlLayerProp.value);

      } catch (err) {}
    }
  }
  selLayer.parent = ctrlLayer;
}

// find center point...
function findCenter(lArray) {

  var trmProp = 'ADBE Transform Group';
  var posProp = 'ADBE Position';

  var maxY = 0;
  var minY = 0;
  var maxX = 0;
  var minX = 0;
  var maxZ = 0;
  var minZ = 0;

  for (i = 0; i < lArray.length; i++) {
    var aLayer = lArray[i];
    var lPos = aLayer.property(trmProp).property(posProp);
    var lPosX = lPos.value[0];
    var lPosY = lPos.value[1];
    var lPosZ = lPos.value[2];

    if (i == 0) {
      maxX = lPosX;
      minX = lPosX;
      maxY = lPosY;
      minY = lPosY;
      minZ = lPosZ;
      minZ = lPosZ;

    } else {
      if (lPosX > maxX) {
        maxX = lPosX;
      } else if (lPosX < minX) {
        minX = lPosX;
      }
      if (lPosY > maxY) {
        maxY = lPosY;
      } else if (lPosY < minY) {
        minY = lPosY;
      }
      if (lPosZ > maxZ) {
        maxZ = lPosZ;
      } else if (lPosZ < minZ) {
        minZ = lPosZ;
      }
    }
  }
  var cPos = [];
  cPos.push(minX + (maxX - minX) / 2);
  cPos.push(minY + (maxY - minY) / 2);
  cPos.push(minZ + (maxZ - minZ) / 2);

  return cPos;
}

// returns a random integer...
function getRndInteger(min, max) {

  return Math.floor(Math.random() * (max - min)) + min;
}

function gaussRnd(samples) {
  var r = 0;

  for (var i = 0; i < samples; i ++) {
    r += Math.random();
  }

  return r / samples;
}

/*

---------------------------------------------------------------
# string functions
---------------------------------------------------------------

*/

// sets the text case (upper, lower e title)...
function titleCase(str) {

  str = str.toLowerCase().split(' ');

  for (i = 0; i < str.length; i++) {
    str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);
  }
  return str.join(' ');
}

function setTxtCase(selLayer, caseType) {

  var txtProp = 'ADBE Text Properties';
  var txtDoc = 'ADBE Text Document';

  if (selLayer instanceof TextLayer) {
    var srcTxt = selLayer.property(txtProp).property(txtDoc);
    var txt = srcTxt.value;

    switch (caseType) {

      case(0):
        srcTxt.setValue(txt.toString().toUpperCase());
        break;

      case(1):
        srcTxt.setValue(txt.toString().toLowerCase());
        break;

      case(2):
        srcTxt.setValue(titleCase(txt.toString()));
    }
  } else {

    return false;
  }
}

// cleans multiple line breaks and consecutive space characters...
function cleanText(selLayer) {

  var srcTxt = selLayer.property(txtProp).property(txtDoc);
  var txt = srcTxt.value;

  if (selLayer instanceof TextLayer) {

    txt = txt.toString().replace(/[\r|\n][\s]{2,}/g, '\n');
    txt = txt.replace(/\s{2,}/g, ' ');
    srcTxt.setValue(trim(txt));
  } else {

    return false;
  }
}

// divides a text layer in multiple columns...
function columnText(selLayer, numColumns) {

  var txtProp = 'ADBE Text Properties';
  var txtDoc = 'ADBE Text Document';

  var srcTxt = selLayer.property(txtProp).property(txtDoc);
  var txt = srcTxt.value.toString();
  txt = txt.replace(/[\s]*[\r|\n]{1,}[\s]*/g, '*|*');
  txt = txt.replace(/[\s]*[\-]{3,}[\s]*/g, '*|*');
  txt = txt.replace(/[\s]{2,}/g, '*|*');

  var cellArray = txt.split('*|*');

  if (cellArray.length >= numColumns) {

    var col1 = [];
    var col2 = [];
    var col3 = [];
    var cols = [col1, col2, col3];
    var colLayers = [];
  
    for (i = 0; i < cellArray.length; i++) {
  
      switch (numColumns - ((i + 1) % numColumns)) {
        case 1:
          col1.push(cellArray[i]);
          break;
  
        case 2:
          col2.push(cellArray[i]);
          break;
  
        case 3:
          col3.push(cellArray[i]);
          break;
      }
    }
    for (i = 0; i < numColumns; i++) {
  
      var colName = cols[i][0];
      var colTxt = cols[i][0];
      var colLayer;
  
      for (c = 1; c < cols[i].length; c++) {
        colTxt = colTxt + '\n' + cols[i][c];
      }
      colLayer = app.project.activeItem.layers.addText(colTxt);
      colLayer.name = colName;
      colLayers.push(colLayer);
    }
    return colLayers;

  } else {

    return false;
  }
}

// breaks text based on a character limit...
function lineBreak(selLayer, inputLimit) {

  inputLimit = Math.floor(inputLimit);

  if (selLayer instanceof TextLayer) {

    var srcTxt = selLayer.property(txtProp).property(txtDoc);
    var txt = srcTxt.value.toString().replace(/\n|\r|\t|\v/g, ' ');
    var txt2 = '';
    var wrdArray = txt.split(' ');

    for (i = 0; i < wrdArray.length; i++) {
      var letterCount = wrdArray[i].length;

      if (letterCount >= inputLimit) {
        inputLimit = letterCount + 1;
      }
    }
    while (txt.length > inputLimit) {

      for (i = inputLimit; i > 0; i--) {

        if (txt[i] == ' ') {
          txt2 += txt.substring(0, i);
          txt = '\n' + trim(txt.substring(i + 1, txt.length));
          break;
        }
      }
    }
    srcTxt.setValue(txt2 + txt);
  }
}

// date shortener...
function replaceDateTxt(str) {

  str = str.replace(/SEGUNDA/, 'SEG');
  str = str.replace(/TERÇA|TER\u00C7A|TERCA/, 'TER');
  str = str.replace(/QUARTA/, 'QUA');
  str = str.replace(/QUINTA/, 'QUI');
  str = str.replace(/SEXTA/, 'SEX');
  str = str.replace(/SÁBADO|S\u00C1BADO|SABADO/, 'SAB');
  str = str.replace(/DOMINGO/, 'DOM');

  str = str.replace(/ DE/, '');
  str = str.replace(/JANEIRO/, 'JAN');
  str = str.replace(/FEVEREIRO/, 'FEV');
  str = str.replace(/MARÇO|MAR\u00C7O|MARCO/, 'MAR');
  str = str.replace(/ABRIL/, 'ABR');
  str = str.replace(/MAIO/, 'MAI');
  str = str.replace(/JUNHO/, 'JUN');
  str = str.replace(/JULHO/, 'JUL');
  str = str.replace(/AGOSTO/, 'AGO');
  str = str.replace(/SETEMBRO/, 'SET');
  str = str.replace(/OUTUBRO/, 'OUT');
  str = str.replace(/NOVEMBRO/, 'NOV');
  str = str.replace(/DEZEMBRO/, 'DEZ');

  return str;
}

function trim(str) {

  return str.replace(/^\s+|\s+$/gm, '');
}

function deleteFileExt(str) {

  return str.replace(/\.[0-9a-z]+$/i, '');
}

function getFileExt(str) {

  return str.match(/\.[0-9a-z]+$/i).toString().toLowerCase();
}

// replaces most of the special characters...
function replaceSpcChar(str) {

  str = str.replace(/À|Á|Â|Ã|Ä|\u00C0|\u00C1|\u00C2|\u00C3|\u00C4/g, 'A');
  str = str.replace(/à|á|â|ã|ä|\u00E0|\u00E1|\u00E2|\u00E3|\u00E4/g, 'a');
  str = str.replace(/È|É|Ê|Ë|\u00C8|\u00C9|\u00CA|\u00CB/g, 'E');
  str = str.replace(/è|é|ê|ë|\u00E8|\u00E9|\u00EA|\u00EB/g, 'e');
  str = str.replace(/Ì|Í|Î|Ï|\u00CC|\u00CD|\u00CE|\u00CF/g, 'I');
  str = str.replace(/ì|í|î|ï|\u00EC|\u00ED|\u00EE|\u00EF/g, 'i');
  str = str.replace(/Ò|Ó|Ô|Õ|Ö|\u00D2|\u00D3|\u00D4|\u00D5|\u00D6/g, 'O');
  str = str.replace(/ò|ó|ô|õ|ö|\u00F2|\u00F3|\u00F4|\u00F5|\u00F6/g, 'o');
  str = str.replace(/Ù|Ú|Û|Ü|\u00D9|\u00DA|\u00DB|\u00DC/g, 'U');
  str = str.replace(/ù|ú|û|ü|\u00F9|\u00FA|\u00FB|\u00FC/g, 'u');
  str = str.replace(/Ç|\u00C7/g, 'C');
  str = str.replace(/ç|\u00E7/g, 'c');
  str = str.replace(/\n|\r/g, ' '); // replaces line breaks...
  str = str.replace(/\_|-|\|/g, ' ');
  str = str.replace(/[\s]{2,}/g, ' '); // replaces 2 or more spaces...
  str = str.replace(/[^\w\s]/ig, ''); // replaces any non-word character except space...

  return trim(str);
}

function deletePrefix(str, prefixStr) {

  var patStr = 'new RegExp(/(' + prefixStr + '(\\' + charPrefix + '|\\s)*)+/)';
  var pat = eval(patStr);

  return str.replace(pat, '');
}

/*

---------------------------------------------------------------
# project organization and renaming
---------------------------------------------------------------

*/

function emptyFolders() {

  for (i = app.project.numItems; i >= 1; i--) {
    var rFolder = app.project.rootFolder;
    var aItem = app.project.item(i);

    if (aItem instanceof FolderItem) {

      while (aItem.numItems > 0) {
        aItem.item(1).parentFolder = rFolder;
      }
    }
  }
}

function getComps() {

  var compArray = [];
  var precompArray = [];
  var assArray = [];
  var expArray = [];
  var GArray = [];
  var pushChk;

  for (i = 1; i <= app.project.numItems; i++) {
    var aItem = app.project.item(i);
    var expCheck = itemSetting(aItem, 'export');

    if (aItem instanceof CompItem) {
      var cItem = aItem;
      pushChk = true;

      for (l = 1; l <= cItem.numLayers; l++) {
        var cLayer = cItem.layer(l);

        if (cLayer.name == 'ctrl_comp') {

          // get all different comp templates...
          switch (true) {

            case(cLayer.effect('servico') != undefined):
              assArray.push(cItem);
              pushChk = false;
              break;

            case(cLayer.effect('GNEWS logo') != undefined):
              GArray.push(cItem);
              pushChk = false;
              break;
          }
        }
      }
      if (pushChk) {
        compArray.push(cItem);
      }
    }
    if (expCheck) {
      expArray.push(aItem);
    }
  }
  for (i = 0; i < compArray.length; i++) {
    var pItem = compArray[i];
    pushChk = false;

    for (l = 1; l <= pItem.numLayers; l++) {
      var pLayer = pItem.layer(l);

      for (a = 0; a < assArray.length; a++) {

        if (pLayer.source == assArray[a]) {
          expArray.push(pItem);
          pushChk = true;
          break;
        }
      }
    }
    if (!pushChk) {
      precompArray.push(pItem);
    }
  }
  return [assArray, expArray, precompArray, GArray];
}

function getFootage() {

  var stillArray = [];
  var footageArray = [];
  var sonoArray = [];
  var solidArray = [];
  var missingArray = [];

  for (i = app.project.numItems; i >= 1; i--) {
    var aItem = app.project.item(i);

    if (aItem instanceof FootageItem) {

      if (!aItem.footageMissing) {

        switch (true) {
          case (aItem.mainSource instanceof FileSource):

          switch (true) {
            case (aItem.mainSource.isStill):
              stillArray.push(aItem);
              break;

            case (aItem.hasVideo):
              footageArray.push(aItem);
              break;

            default:
              sonoArray.push(aItem);
          }
          break;

          case (aItem.mainSource instanceof SolidSource):
            solidArray.push(aItem);
            break;
        }
      } else {
        missingArray.push(aItem.name);
      }
    }
  }

  return [stillArray, footageArray, sonoArray, solidArray, missingArray];
}

// creates the project folder structure...
function projectTemplate(template) {

  var rndFolder; // render folder...
  var assFolder; // packshot comps folder...
  var ftgFolder; // footage folder...
  var imgFolder; // images folder...
  var snoFolder; // sounds folder...
  var solFolder; // solids folder...
  var comFolder; // precomps folder...
  var astFolder; // assets folder...
  var GFolder; // GNEWS logo folder...
  var fldArray = [];
  var rFolder = app.project.rootFolder; // project root folder

  switch (template) {

    case (0):
      rndFolder = rFolder;
      astFolder = app.project.items.addFolder('_MATERIAL');
      comFolder = app.project.items.addFolder('Comps');
      comFolder.parentFolder = astFolder;
      GFolder = app.project.items.addFolder('Marca GNEWS');
      GFolder.parentFolder = astFolder;
      assFolder = app.project.items.addFolder('Assinaturas');
      assFolder.parentFolder = astFolder;
      ftgFolder = app.project.items.addFolder('Videos');
      ftgFolder.parentFolder = astFolder;
      imgFolder = app.project.items.addFolder('Images');
      imgFolder.parentFolder = astFolder;
      snoFolder = app.project.items.addFolder('Sounds');
      snoFolder.parentFolder = astFolder;
      solFolder = app.project.items.addFolder('Solids');
      solFolder.parentFolder = astFolder;
      break;

    case (1):
      rndFolder = app.project.items.addFolder('---- render ----');
      assFolder = app.project.items.addFolder('assinaturas');
      assFolder.parentFolder = rndFolder;
      astFolder = app.project.items.addFolder('assets');
      GFolder = app.project.items.addFolder('marca GNEWS');
      GFolder.parentFolder = astFolder;
      ftgFolder = app.project.items.addFolder('footage');
      ftgFolder.parentFolder = astFolder;
      imgFolder = app.project.items.addFolder('images');
      imgFolder.parentFolder = ftgFolder;
      snoFolder = app.project.items.addFolder('sounds');
      snoFolder.parentFolder = ftgFolder;
      solFolder = app.project.items.addFolder('solids');
      solFolder.parentFolder = astFolder;
      comFolder = app.project.items.addFolder('precomps');
      comFolder.parentFolder = astFolder;
      break;
  }
  fldArray.push(rndFolder);
  fldArray.push(assFolder);
  fldArray.push(ftgFolder);
  fldArray.push(imgFolder);
  fldArray.push(snoFolder);
  fldArray.push(solFolder);
  fldArray.push(comFolder);
  fldArray.push(GFolder);

  return fldArray;
}

function populateFolders() {

  var p = parseInt(projTemplateDrop.selection);

  var comps = getComps();
  var footage = getFootage();
  var folders = projectTemplate(p);

  var ass = comps[0];
  var exp = comps[1];
  var com = comps[2];
  var G = comps[3];

  var stl = footage[0];
  var ftg = footage[1];
  var sno = footage[2];
  var sol = footage[3];
  var mis = footage[4];

  var rndFolder = folders[0];
  var assFolder = folders[1];
  var ftgFolder = folders[2];
  var imgFolder = folders[3];
  var snoFolder = folders[4];
  var solFolder = folders[5];
  var comFolder = folders[6];
  var GFolder = folders[7];

  var fileArray = [];
  var fldArray = [];
  var sameFileArray = [];
  var doneArray = [];
  var iFolder;
  var fileStr;

  // TODO: make function...

  if (com.length > 0) {
    for (c = 0; c < com.length; c++) {
      com[c].parentFolder = comFolder;
    }
  }
  if (G.length > 0) {
    for (g = 0; g < G.length; g++) {
      G[g].parentFolder = GFolder;
    }
  }
  if (exp.length > 0) {
    for (e = 0; e < exp.length; e++) {
      exp[e].parentFolder = rndFolder;
    }
  }
  if (ass.length > 0) {
    for (a = 0; a < ass.length; a++) {
      ass[a].parentFolder = assFolder;
    }
  }
  if (ftg.length > 0) {
    for (f = 0; f < ftg.length; f++) {
      ftg[f].parentFolder = ftgFolder;
    }
  }
  if (stl.length > 0) {

    for (s = 0; s < stl.length; s++) {

      if (chkArray(doneArray, stl[s])) {
        stl[s].parentFolder = imgFolder;
        sameFileArray = [stl[s]];

        for (f = 0; f < stl.length; f++) {

          if (f != s && stl[f].file.toString() == stl[s].file.toString()) {
            sameFileArray.push(stl[f]);
          }
        }
        if (sameFileArray.length > 1) {
          fileStr = decodeURI(stl[s].file.name);
          fileStr = deleteFileExt(fileStr) + ' layers';
          iFolder = app.project.items.addFolder(fileStr);
          iFolder.parentFolder = imgFolder;

          for (c = 0; c < sameFileArray.length; c++) {
            sameFileArray[c].parentFolder = iFolder;
            doneArray.push(sameFileArray[c]);
          }
        }
      }
    }
  }
  if (sno.length > 0) {

    for (s = 0; s < sno.length; s++) {
      sno[s].parentFolder = snoFolder;
    }
  }
  if (sol.length > 0) {

    for (s = 0; s < sol.length; s++) {
      sol[s].parentFolder = solFolder;
    }
  }
  if (mis.length > 0) {
    var missingStr = '';

    for (m = 0; m < mis.length; m++) {
      missingStr += '\n    ' + mis[m];
    }
    alert('some files are missing:' + missingStr);
  }
}

function deleteEmptyFolders() {

  for (i = app.project.numItems; i >= 1; i--) {
    var aItem = app.project.item(i);

    if (aItem instanceof FolderItem && aItem.numItems == 0) {
      aItem.remove();
    }
  }
}

function fileArrayCopyAndReplace(ftgItemArray, folder) {

  var ftgFile;
  var ftgCFile;
  var fldFilesArray;
  var fileName;
  var fileCName;
  var ftgExt;
  var sameFileArray = [];
  var doneArray = [];
  var layerFilesArray = [];

  if (!folder.exists) {
    folder.create();
  }
  for (i = 0; i < ftgItemArray.length; i++) {
    ftgFile = ftgItemArray[i].file;
    sameFileArray = [ftgItemArray[i]];

    for (f = 0; f < ftgItemArray.length; f++) {
      var testFile = ftgItemArray[f].file;

      if (i != f && decodeURI(ftgFile) == decodeURI(testFile)) {
        sameFileArray.push(ftgItemArray[f]);
      }
    }
    if (chkArray(doneArray, ftgItemArray[i])) {

      if (decodeURI(ftgFile.path) != decodeURI(folder.fullName)) {
        fldFilesArray = folder.getFiles();
        fileName = deleteFileExt(decodeURI(ftgFile.name));
        fileCName = fileName;
        ftgExt = getFileExt(decodeURI(ftgFile.name));
        ftgCFile = new File(folder.fullName + '/' + fileCName + ftgExt);

        if (ftgCFile.exists) {

          for (a = 0; a < fldFilesArray.length; a++) {
            var fName = fileName.replace(/[ copy ]+[0-9]/g, '') + ftgExt;
            var fAName = deleteFileExt(decodeURI(fldFilesArray[a].name));
            fAName = fAName.replace(/[ copy ]+[0-9]/g, '') + ftgExt;

            if (fName == fAName) {
              fileCName = fileName + ' copy ' + (a + 1).toString();
            }
          }
          ftgCFile = new File(folder.fullName + '/' + fileCName + ftgExt);
        }
        ftgFile.copy(ftgCFile);

        for (c = 0; c < sameFileArray.length; c++) {

          if (chkArray(doneArray, sameFileArray[c])) {

            if (sameFileArray.length > 1 && (ftgExt == '.ai' || ftgExt == '.psd')) {

              if (chkArray(layerFilesArray, (fileName + ftgExt))) {
                layerFilesArray.push(fileName + ftgExt);
              }

            } else {
              sameFileArray[c].replace(ftgCFile);
            }
            doneArray.push(sameFileArray[c]);
          }
        }
      }
    }
  }
  if (layerFilesArray.length > 0) {
    var layerFilesStr = '';

    for (m = 0; m < layerFilesArray.length; m++) {
      layerFilesStr += '\n    ' + layerFilesArray[m];
    }
    alert('this files were copied but not relinked:' + layerFilesStr);
  }
}

function seqArrayCopyAndReplace(seqArray, folder) {

  var seqFile;
  var seqCFile;
  var fldFilesArray;
  var seqName;
  var seqCName;
  var seqExt;
  var firstFrame;
  var seqFld;
  var sameFileArray = [];
  var doneArray = [];

  if (!folder.exists) {
    folder.create();
  }
  for (i = 0; i < seqArray.length; i++) {
    seqFile = new File(seqArray[i][1]);
    seqCFile = seqFile;

    sameFileArray = [seqArray[i][0]];

    for (f = 0; f < seqArray.length; f++) {
      var testFile = new File(seqArray[f][1]);

      if (i != f && decodeURI(seqFile).toString() == decodeURI(testFile).toString()) {
        sameFileArray.push(seqArray[f][0]);
      }
    }
    if (chkArray(doneArray, seqArray[i][0])) {

      if (decodeURI(seqFile.parent.parent).toString() != decodeURI(folder).toString()) {
        frameCount = seqArray[i][2];
        fldFilesArray = folder.getFiles();
        seqName = deleteFileExt(decodeURI(seqFile.name));
        seqName = seqName.replace(/\[|\]|\(|\)|\{|\}+$/, '');
        seqName = seqName.replace(/[0-9]+$/, '');
        seqCName = seqName;
        seqExt = getFileExt(decodeURI(seqFile.name));
        firstFrame = deleteFileExt(decodeURI(seqFile.name)).match(/[0-9]+$/);
        seqFld = new Folder(folder.fullName + '/' + replaceSpcChar(seqCName));

        if (seqFld.exists) {

          for (a = 0; a < fldFilesArray.length; a++) {
            var ftgA = fldFilesArray[a];
            var fName = replaceSpcChar(seqName).replace(/[ copy ]+[0-9]/g, '');
            var fAName = replaceSpcChar(decodeURI(ftgA.name)).replace(/[ copy ]+[0-9]/g, '');

            if (fName == fAName) {
              seqCName = seqName + ' copy ' + (a + 1).toString();
            }
          }
          seqFld = new Folder(folder.fullName + '/' + replaceSpcChar(seqCName));
        }
        seqFld.create();

        for (n = parseInt(firstFrame, 10); n < parseInt(firstFrame, 10) + frameCount; n++) {
          var seqNum = n.toString();

          while (seqNum.length < firstFrame.toString().length) {
            seqNum = '0' + seqNum;
          }
          var seqFileName = seqName + seqNum + seqExt;

          seqFile = new File(decodeURI(seqFile.path) + '/' + seqFileName);
          seqCFile = new File(seqFld.fullName + '/' + seqFileName);

          if (seqFile.exists) {
            seqFile.copy(seqCFile);
          }
        }
      }
    }
    for (c = 0; c < sameFileArray.length; c++) {

      if (chkArray(doneArray, sameFileArray[c])) {
        sameFileArray[c].replaceWithSequence(seqCFile, false);
        doneArray.push(sameFileArray[c]);
      }
    }
  }
}

// copy all footage used in the project...
function filesCollect(savePath) {

  var footage = getFootage();

  var img = footage[0];
  var vid = footage[1];
  var sno = footage[2];
  var imgSeq = [];
  var mis = footage[4];
  var ftgCount = img.length + vid.length + sno.length;
  var ftgIndex = 0;

  var assetsPath = savePath + '/assets/';
  var videosPath = assetsPath + 'videos/';
  var imagesPath = assetsPath + 'images/';
  var sonoPath = assetsPath + 'sono/';

  var assetsFld = new Folder(assetsPath);
  var imagesFld = new Folder(imagesPath);
  var videosFld = new Folder(videosPath);
  var sonoFld = new Folder(sonoPath);

  if (!assetsFld.exists) {
    assetsFld.create();
  }
  if (img.length > 0) {
    fileArrayCopyAndReplace(img, imagesFld);
  }
  if (vid.length > 0) {
    var pathArray = [];
    var frameCountArray = [];

    for (v = 0; v < vid.length; v++) {
      pathArray.push(vid[v].file.fullName);
      frameCountArray.push(vid[v].duration * vid[v].frameRate);
    }
    fileArrayCopyAndReplace(vid, videosFld);

    for (v = 0; v < vid.length; v++) {
      if (vid[v].mainSource.isStill) {
        imgSeq.push([vid[v], pathArray[v], frameCountArray[v]]);
        vid[v].file.remove();
      }
    }
  }
  if (imgSeq.length > 0) {
    seqArrayCopyAndReplace(imgSeq, imagesFld);

    if (videosFld.getFiles().length == 0) {
      videosFld.remove();
    }
  }
  if (sno.length > 0) {
    fileArrayCopyAndReplace(sno, sonoFld);
  }
  if (mis.length > 0) {
    var missingStr = '';

    for (m = 0; m < mis.length; m++) {
      missingStr += '\n    ' + mis[m];
    }
    alert('some files are missing:' + missingStr);
  }
}

// copy all fonts used in the project...
function fontCollect(savePath) {

  var fontArray = [];
  var txtProp = 'ADBE Text Properties';
  var txtDoc = 'ADBE Text Document';

  for (f = 1; f <= app.project.numItems; f++) {
    var aItem = app.project.item(f);

    if (aItem instanceof CompItem) {

      for (l = 1; l <= aItem.numLayers; l++) {
        var aLayer = aItem.layer(l);

        if (aLayer instanceof TextLayer) {

          var textProp = aLayer.property(txtProp);
          var textDoc = textProp.property(txtDoc).value;
          var fontName = textDoc.font;
          var fchk = chkArray(fontArray, fontName);

          if (textDoc.fontLocation == '') {

            alert(fontName + ' not found... >_<');


          } else if (fchk) {

            var fontFolder = new Folder(savePath + '/fonts/');
            var fontCPath = fontFolder.absoluteURI + '/';
            var fontPath = decodeURI(textDoc.fontLocation);
            var ext = getFileExt(fontPath);
            var fontFile = new File(fontPath);
            var fontCFile = new File(fontCPath + fontName + ext);

            fontArray.push(fontName);

            if (!fontFolder.exists) {
              fontFolder.create();
            }
            fontFile.copy(fontCFile);
          }
        }
      }
    }
  }
}

function copyFolderContent(src, dst) {


  var srcFolder = new Folder(src);
  var dstFolder = new Folder(dst);
  var filesArray = [];
  
  if (srcFolder.exists) {
    filesArray = srcFolder.getFiles();
    for (i = 0; i < filesArray.length; i++) {
    
      var aFile = filesArray[i];
      var aFileName = File.decode(aFile.fsName).toString();
      aFileName = aFileName.match(/[^\\|\/]*$/i).toString();
      
      if (dstFolder.exists) {

        var cFile = new File(dst + '/' + aFileName);
        aFile.copy(cFile);        
      }
    }
  }
}

function getURLContent(urlArray, dstArray) {

  var os = $.os;
  var appOs = (os.indexOf('Win') != -1) ? 'Win' : 'Mac';
  
  if (appOs == 'Win') {
    var cmd = '';
    
    for (i = 0; i < urlArray.length; i++) {
      // get only the NOT '\' OR '/' at the end...
      var fileName = decodeURI(urlArray[i].match(/[^\\|\/]*$/i));
      // removes any character after the '?' at the end...
      fileName = fileName.replace(/[\?].*$/, '');
   
      cmd += 'curl ' + urlArray[i] + ' -OutFile \'' + dstArray[i] + '/' + fileName + '\';';
    }
    var cmdStr = 'cmd.exe /c powershell.exe -c "' + cmd + '"';

    system.callSystem(cmdStr);
  }
}

// smart rename based on item selection...
function smartRename(aItem, itemName) {

  var selArray = app.project.selection;

  switch (selArray.length > 0) {

    case(false):
      aItem.name = itemName;
      break;

    case(true):
      if (aItem.selected) {
        aItem.name = itemName;
      }
      break;
  }
}

// rename comps (assinaturas, exports)...
function renameComps(projId, projName, compArray) {

  var txtProp = 'ADBE Text Properties';
  var txtDoc = 'ADBE Text Document';
  var baseName = userPrefix + ' PROMO - ' + projId;

  var assArray = compArray[0];
  var expArray = compArray[1];

  for (i = 0; i < assArray.length; i++) {
    var assComp = assArray[i];

    var assDate = assComp.layer('txt_data').property(txtProp).property(txtDoc).value;
    var assDateTxt = replaceSpcChar(replaceDateTxt(assDate.toString().toUpperCase()));
    var assTime = assComp.layer('txt_horario').property(txtProp).property(txtDoc).value;
    var assTimeTxt = replaceSpcChar(assTime.toString().toUpperCase());

    var assSerTxt = (assTimeTxt != '') ? assDateTxt + ' ' + assTimeTxt : assDateTxt;
    var assName = baseName + ' assinatura ' + assSerTxt;

    smartRename(assComp, assName);
  }
  for (i = 0; i < expArray.length; i++) {
    var expComp = expArray[i];
    var expSerTxt = '';

    for (l = 1; l <= expComp.numLayers; l++) {

      for (a = 0; a < assArray.length; a++) {

        if (expComp.layer(l).source == assArray[a]) {
          var compAssComp = assArray[a];

          var expDate = compAssComp.layer('txt_data').property(txtProp).property(txtDoc).value;
          var expDateTxt = replaceSpcChar(replaceDateTxt(expDate.toString().toUpperCase()));
          var expTime = compAssComp.layer('txt_horario').property(txtProp).property(txtDoc).value;
          var expTimeTxt = replaceSpcChar(expTime.toString().toUpperCase());
          expSerTxt = (expTimeTxt != '') ? expDateTxt + ' ' + expTimeTxt : expDateTxt;
          expSerTxt = ' ' + expSerTxt;

          break;
        }
      }
    }
    var compName = baseName + ' ' + projName + expSerTxt;
    expComp.comment = 'export: true';
    smartRename(expComp, compName);
  }
}

function textName(aLayer) {

  var txtProp = 'ADBE Text Properties';
  var txtDoc = 'ADBE Text Document';
  var txtVal = aLayer.property(txtProp).property(txtDoc).value;
  var lName = txtVal.toString();

  return lName;
}

function nullName(aLayer) {

  var cArray = [];
  var aItem = aLayer.containingComp;
  var lName = aLayer.name;

  for (c = 1; c <= aItem.numLayers; c++) {

    if (aItem.layer(c).parent == aLayer) {
      cArray.push(aItem.layer(c));
    }
  }
  if (cArray.length == 1) {
    lName = cArray[0].name;
  }

  return lName;
}

function adjustmentName(aLayer) {

  var fxProp = 'ADBE Effect Parade';
  var fxNum = aLayer.property(fxProp).numProperties;
  var lName = '';

  if (fxNum > 0) {
    lName = aLayer.property(fxProp).property(1).name;

    for (i = 2; i <= fxNum; i++) {

      if (i < 4) {
        lName += ' | ' + aLayer.property(fxProp).property(i).name;

      } else {
        lName += '...';
        break;
      }
    }
  }

  return lName;
}

function matteName(aLayer) {

  var aItem = aLayer.containingComp;
  var matteName = aItem.layer(aLayer.index + 1).name;
  var lName = matteName;

  return lName;
}

function getPrefixes() {

  var prefixArray = [];
  prefixArray.push(compPrefix);
  prefixArray.push(solPrefix);
  prefixArray.push(adjPrefix);
  prefixArray.push(nullPrefix);
  prefixArray.push(txtPrefix);
  prefixArray.push(shpPrefix);
  prefixArray.push(ctrlPrefix);
  prefixArray.push(mattePrefix);
  prefixArray.push(camPrefix);
  prefixArray.push(lgtPrefix);

  return prefixArray;
}

// rename comp layers...
function renameLayers(compArray) {

  function defaultSet(aLabel, aPrefix) {

    //lLabel = aLabel; // TODO: label system...
    lPrefix = aPrefix;
  }

  var prefixArray = getPrefixes();

  for (i = 0; i < compArray.length; i++) {
    var defaultIncArray = [];
    var aItem = compArray[i];

    for (l = aItem.numLayers; l >= 1; l--) {
      var aLayer = aItem.layer(l);
      var lName = aLayer.name;
      var lLabel = aLayer.label;
      var shpNullChk = false;
      var lLock = (aLayer.locked) ? true : false;
      var lPrefix = '';
      var rename = false;
      aLayer.locked = false;

      switch (true) {
        case(aLayer instanceof TextLayer):
          if (txtTogBtn.value) {
            rename = true;
            lName = textName(aLayer);
            defaultSet(1, txtPrefix);
          }
          break;

        case(aLayer instanceof ShapeLayer):
          var vGrp = aLayer.property('ADBE Root Vectors Group');

        if (vGrp.numProperties == 0 || vGrp.property(1).name == 'null') {
          shpNullChk = true;
        }
        if (shpTogBtn.value) {
          rename = true;
          defaultIncArray.push(aLayer);
          defaultSet(1, shpPrefix);

          if (shpNullChk) {
            aLayer.guideLayer = true;
            lName = nullName(aLayer);
            defaultSet(1, nullPrefix);
          }
          if (aLayer.adjustmentLayer) {
            lName = adjustmentName(aLayer);
            defaultSet(1, adjPrefix);
          }
          if (aLayer.isTrackMatte) {
            lName = matteName(aLayer);
            defaultSet(1, mattePrefix);
          }
        }
        break;

        case(aLayer instanceof CameraLayer):
          if (camTogBtn.value) {
            rename = true;
            defaultSet(1, camPrefix);
          }
          break;

        case(aLayer instanceof LightLayer):
          if (lgtTogBtn.value) {
            rename = true;
            defaultIncArray.push(aLayer);
            defaultSet(1, lgtPrefix);
          }
          break;

        case(aLayer.source.mainSource instanceof SolidSource):
          if (solTogBtn.value) {
            rename = true;
            defaultSet(1, solPrefix);

            if (aLayer.nullLayer) {
              aLayer.guideLayer = true;
              lName = nullName(aLayer);
              defaultSet(1, nullPrefix);
            }
            if (aLayer.adjustmentLayer) {
              lName = adjustmentName(aLayer);
              defaultSet(1, adjPrefix);
            }
            if (aLayer.isTrackMatte) {
              lName = matteName(aLayer);
              defaultSet(1, mattePrefix);
            }
          }
          break;

        case(aLayer.source.mainSource instanceof FileSource):
          var lSource = aLayer.source;

          if (ftgTogBtn.value && lSource.mainSource.isStill) {

            if (aLayer.adjustmentLayer) {
              rename = true;
              lName = adjustmentName(aLayer);
              defaultSet(1, adjPrefix);
            }
            if (aLayer.isTrackMatte) {
              rename = true;
              lName = matteName(aLayer);
              defaultSet(1, mattePrefix);
            }
          }
          if (ftgTogBtn.value && lSource.hasVideo) {

            if (aLayer.adjustmentLayer) {
              rename = true;
              lName = adjustmentName(aLayer);
              defaultSet(1, adjPrefix);
            }
            if (aLayer.isTrackMatte) {
              rename = true;
              lName = matteName(aLayer);
              defaultSet(1, mattePrefix);
            }
          }
          break;
      }
      if (rename) {

        for (p = 0; p < prefixArray.length; p++) {
          lName = deletePrefix(lName, prefixArray[p]);
        }
        if (aLayer.adjustmentLayer || aLayer.isTrackMatte) {
          lName = lPrefix + charPrefix + lName.toLowerCase();

        } else {
          lName = lPrefix + charPrefix + replaceSpcChar(lName).toLowerCase();
        }
        aLayer.name = lName;
        aLayer.label = lLabel;
      }
      aLayer.locked = lLock;
    }
    defaultNameInc(defaultIncArray);
  }
}

// simple name increment based on the layer stack...
function defaultNameInc(layerArray) {

  for (l = 0; l < layerArray.length; l++) {
    var abcName = layerArray[l].name.replace(/\s*[0-9]+\b/, '');
    layerArray[l].name = abcName;
  }
  for (l = layerArray.length - 1; l >= 0; l--) {
    var nameArray = [];

    for (n = 0; n < layerArray.length; n++) {

      if (layerArray[l].name == layerArray[n].name) {
        nameArray.push(layerArray[l]);
      }
    }
    var num = (nameArray.length > 1) ? ' ' + nameArray.length.toString() : '';
    layerArray[l].name += num;
  }
}

function nameInc(aName) {

  var abcName = aName.replace(/\s*[0-9]+\b/, '');
  var num = aName.match(/\s*[0-9]+\b/);
  var numStr = (num == null) ? 2 : parseInt(num) + 1;

  return abcName + ' ' + numStr.toString();
}

/*

---------------------------------------------------------------
# color and conversions
---------------------------------------------------------------

*/

// converts rgb color to a simple array...
function rgb(r, g, b) {

  r = r / 255;
  g = g / 255;
  b = b / 255;

  return [r, g, b];
}

// converts rgba color to a simple array...
function rgba(r, g, b, a) {

  r = r / 255;
  g = g / 255;
  b = b / 255;
  a = a / 255;

  return [r, g, b, a];
}

function componentToHex(c) {

  var hexStr = c.toString(16);
  hexStr = (hexStr.length == 1) ? "0" + hexStr : hexStr;

  return hexStr;
}

function rgbToHex(rgbArray) {

  r = rgbArray[0] * 255;
  g = rgbArray[1] * 255;
  b = rgbArray[2] * 255;

  return '0x' + componentToHex(r) + componentToHex(g) + componentToHex(b);
}

function rgbStr(val) {

  if (val.length > 0) {
    val = rgbToHex(val);

  } else if (eval(val).length > 0) {
    val = rgbToHex(eval(val));
  }
  var r = (val >> 16) & 0xFF;
  var g = (val >> 8) & 0xFF;
  var b = (val) & 0xFF;

  return "rgb(" + r + ", " + g + ", " + b + ")";
}

function hexToRGB(hex) {
  
  hex = hex.replace('#', '');
  
  var r = '0x' + hex[0] + hex[1] | 0;
  var g = '0x' + hex[2] + hex[3] | 0;
  var b = '0x' + hex[4] + hex[5] | 0;
  
  return [r/255, g/255, b/255];
}

// returns a random color from de color preferences...
function randomColor() {

  var colorArray = labelColors;
  var r1 = getRndInteger(0, colorArray.length);

  return colorArray[r1];
}

/*

---------------------------------------------------------------
# ui and layout
---------------------------------------------------------------

*/

//
function customDraw() {

  with (this) {

    graphics.drawOSControl();
    graphics.rectPath(0, 0, size[0], size[1]);
    graphics.fillPath(fillBrush);
  }
}

// returns a random error code ;P...
function errCode() {

  return 'ERROR code ' + getRndInteger(400, 999).toString() + '        ';
}

// changes the window background color...
function setBgColor(color) {

  var bType = w.graphics.BrushType.SOLID_COLOR;
  w.graphics.backgroundColor = w.graphics.newBrush(bType, color);
}

function setBtnColor(btn, color) {

  var bType = w.graphics.BrushType.SOLID_COLOR;
  btn.fillBrush = btn.graphics.newBrush(bType, color);
}

// changes static text color...
function setTxtColor(sTxt, color) {

  var pType = sTxt.graphics.PenType.SOLID_COLOR;
  sTxt.graphics.foregroundColor = sTxt.graphics.newPen(pType, color, 1);
}

function setLayout() {

  wLayout = (w.size.width > w.size.height) ? 'row' : 'column';

  if (wLayout == 'row') {

    // horizontal layout
    imgAlignment = 'left';
    errImgAlignment = 'left';
    closeAlignment = 'right';

    mainGrp.margins = [100, 0, 35, 0];
    imgGrp.margins = [20, 0, 0, 0];
    errImgGrp.margins = [20, 0, 0, 0];
    progImgGrp.margins = [20, 0, 0, 0];
    closeGrp.margins = 0;
    prefGrp.margins = 0;

    mainGrp.spacing = 10;

    for (i = 0; i < tabs.length; i++) {

      tabs[i].spacing = 10;
    }
    preferencesGrp.spacing = 10;
    // text tab - limit text horizontal controls
    limitSld.visible = true;
    limitSld.size.width = 200;
    limitSld.size.height = 16;
    limitTxt.visible = true;
    limitTxt.size.width = 60;
    limitTxt.size.height = 24;
    // text tab - limit text vertical controls
    limitTxt2.visible = false;
    limitTxt2.size.width = 0;
    limitTxt2.size.height = 0;
    // project tab - controls
    projIdTxt.size.width = 80;
    projNameTxt.size.width = 140;
    lDrop.size.width = 80;
    projTemplateDrop.size.width = 80;
    colorDrop.size.width = 80;
    tabColorBtn.size.width = 20;
    // error tab
    errTxt.visible = true;
    errTxt.size.width = 500;
    progTxt1.visible = true;
    // progress tab
    progTxt1.size.width = 160;
    progTxt2.visible = true;
    progTxt2.size.width = 160;

  } else {

    // vertical layout
    imgAlignment = 'bottom';
    errImgAlignment = 'center';
    closeAlignment = 'top';

    mainGrp.margins = [0, 40, 0, 30];
    imgGrp.margins = [0, 0, 0, 5];
    errImgGrp.margins = [0, 0, 0, 5];
    progImgGrp.margins = [0, 0, 0, 5];
    closeGrp.margins = [0, 10, 0, 0];
    prefGrp.margins = [0, 10, 0, 0];

    mainGrp.spacing = 2;
    menuGrp.spacing = 2;

    for (i = 1; i < tabs.length; i++) {

      tabs[i].spacing = 5;
    }
    preferencesGrp.spacing = 5;
    // text tab - limit text horizontal controls
    limitSld.visible = false;
    limitSld.size.width = 0;
    limitSld.size.height = 0;
    limitTxt.visible = false;
    limitTxt.size.width = 0;
    limitTxt.size.height = 0;
    // text tab - limit text vertical controls
    limitTxt2.visible = true;
    limitTxt2.size.width = 70;
    limitTxt2.size.height = 24;
    // project tab - controls
    projIdTxt.size.width = 70;
    projNameTxt.size.width = 70;
    lDrop.size.width = 70;
    projTemplateDrop.size.width = 70;
    colorDrop.size.width = 70;
    tabColorBtn.size.width = 66;
    // error tab
    errTxt.visible = false;
    errTxt.size.width = 0;
    // progress tab
    progTxt1.visible = false;
    progTxt1.size.width = 0;
    progTxt2.visible = false;
    progTxt2.size.width = 0;
  }
  // all tab subgroups
  for (i = 0; i < tabSubGrps.length; i++) {

    tabSubGrps[i].orientation = wLayout;
  }
  // all tabs
  for (i = 0; i < tabs.length; i++) {

    tabs[i].orientation = wLayout;
  }
  preferencesGrp.orientation = wLayout;
  imgGrp.alignment = imgAlignment;
  errImgGrp.alignment = errImgAlignment;
  progImgGrp.alignment = errImgAlignment;
  errTabGrp.alignment = imgAlignment;
  errTabGrp.orientation = wLayout;
  closeGrp.alignment = closeAlignment;
  prefGrp.alignment = closeAlignment;


  updateLayout();
}

function updateLayout() {

  for (i = 0; i < tabSubGrps.length; i++) {

    tabSubGrps[i].layout.layout(true);
  }

  for (i = 0; i < tabs.length; i++) {

    tabs[i].layout.layout(true);
  }
  preferencesGrp.layout.layout(true);
  imgGrp.layout.layout(true);
  errImgGrp.layout.layout(true);
  progImgGrp.layout.layout(true);
  errTabGrp.layout.layout(true);
  closeGrp.layout.layout(true);
  prefGrp.layout.layout(true);

  mainGrp.layout.layout(true);

  w.layout.layout(true);
  w.layout.resize();
}

// turns off all tab groups visibility...
function allGrpGone() {

  for (i = 1; i < tabs.length; i++) {

    tabs[i].visible = false;
  }
  preferencesGrp.visible = false;
  errTabGrp.visible = false;
  closeGrp.visible = false;
}

// turns on the respective tab group visibility...
function openTab(grp, color) {

  grp.visible = true;
  closeGrp.visible = true;
  imgGrp.visible = true;

  menuGrp.visible = false;
  prefGrp.visible = false;
  closeErrBtn.visible = false;

  if (grp == menuGrp) {

    closeGrp.visible = false;
    prefGrp.visible = true;
  }
  errImgGrp.visible = false;
  progImgGrp.visible = false;
  progressGrp.visible = false;

  setBgColor(color);
}

//
function replaceErrImage() {
  var r = getRndInteger(0, errImgArray.length);

  errImgGrp.remove(errImg);
  errImg = errImgGrp.add('image', undefined, errImgArray[r]);
  w.layout.layout(true);
  w.layout.resize();

  return errImg;
}

// turns on error tab group visibility in the tab level...
function showTabErr(msg) {

  errTxt.text = errCode() + msg;
  errImgGrp.visible = true;
  closeGrp.visible = true;
  errTabGrp.visible = true;
  closeErrBtn.visible = true;

  prefGrp.visible = false;
  grp.visible = false;
  menuGrp.visible = false;
  closeBtn.visible = false;
  imgGrp.visible = false;
  progImgGrp.visible = false;
  errImg.helpTip = msg;
  errImg = replaceErrImage();

  setBgColor(errGrpColor);
  clearOutput();
  write(msg);
}

function showTabProg(msg) {

  progTxt1.text = 'KEEP CALM';
  progTxt2.text = msg;
  progressGrp.visible = true;
  progImgGrp.visible = true;
  progImgGrp.helpTip = msg;

  closeGrp.visible = false;
  prefGrp.visible = false;
  grp.visible = false;
  menuGrp.visible = false;
  closeBtn.visible = false;
  closeErrBtn.visible = false;
  imgGrp.visible = false;
  errImgGrp.visible = false;

  setBgColor(errGrpColor);
  clearOutput();
  write(msg);
}


/*

---------------------------------------------------------------
# script preferences
---------------------------------------------------------------

*/

function loadStaticPrefs() {

  // all group names
  grpNames = [];
  grpNames.push('menu');
  grpNames.push('ctrl');
  grpNames.push('animation');
  grpNames.push('fx');
  grpNames.push('text');
  grpNames.push('pallet');
  grpNames.push('layers');
  grpNames.push('tools');
  grpNames.push('project');
  grpNames.push('app');
  grpNames.push('links');

  // item prefixes...
  compPrefix = 'comp';
  adjPrefix = 'adj';
  solPrefix = 'sol';
  nullPrefix = 'null';

  // layer prefixes...
  txtPrefix = 'txt';
  shpPrefix = 'shp';
  camPrefix = 'cam';
  lgtPrefix = 'lgt';
  ctrlPrefix = 'ctrl';
  userPrefix = 'user';
  mattePrefix = 'matte';

  // prefix separator...
  charPrefix = '_';

  prefGrpColor = rgb(35, 35, 35);
  errGrpColor = rgb(20, 20, 20);

  // static text colors (UI)...
  sTxtColor = rgb(234, 234, 234);
  errTxtColor = rgb(140, 0, 51);
  aboutTxtColor = rgb(80, 80, 80);

  // globo folders...
  hnPath = '//10.181.53.152/arte_ilhasjorn/UPLOAD_MAM/Hardnews_MAM';
  utiPath = '//10.197.18.172/arte/UTILIDADES';
}

//https://coolors.co/8c252f-bf3a48-cb6259-d68a69-c2b6a3-db9437-6ea57d-00b5c2-5f3691-6e489b

function loadDefaultPrefs() {

  var defPrefs = {
    'color': {
      'menu':'#5F3691',
      'ctrl':'#BF3A48',
      'animation':'#CB6259',
      'fx':'#D68A69',
      'text':'#C2B6A3',
      'pallet':'#202020',
      'layers':'#DB9437',
      'tools':'#6EA57D',
      'project':'#00B5C2',
      'app':'#5F3691',
      'links':'#6E489B',
      },

    "label":{
      'l1':'#F44336',
      'l2':'#E81D62',
      'l3':'#9B26AF',
      'l4':'#6639B6',
      'l5':'#3E50B4',
      'l6':'#02A8F3',
      'l7':'#00BBD3',
      'l8':'#009587',
      'l9':'#8AC249',
      'l10':'#CCDB38',
      'l11':'#FEEA3A',
      'l12':'#FE9700',
      'l13':'#FF5722',
      'l14':'#785447',
      'l15':'#9D9D9D',
      'l16':'#5F7C8A'
    },

    'folders': {
      'arte':'//10.181.53.152/arte_ilhasjorn/PARA ARTE/PROMO GNEWS/MXF ARTE',
      'magazine':'//10.181.53.152/arte_ilhasjorn/UPLOAD_MAM/Magazine'
    },

    'selection':{
      'layerType':0,
      'projectModel':0
    },
  
    'user':system.userName.substring(0, 3).toUpperCase()
  };
  tabColors = [];
  labelColors = [];

  for (i = 0; i < grpNames.length; i++) {

    tabColors.push(hexToRGB(defPrefs.color[grpNames[i]]));
  }

  for (i = 1; i <= 16; i++) {

    labelColors.push(hexToRGB(defPrefs.label['l' + i]));
  }
  artePath = defPrefs.folders.arte;
  magPath = defPrefs.folders.magazine;
  lDropSel = defPrefs.selection.layerType;
  projMDropSel = defPrefs.selection.projectModel;
  userPrefix = defPrefs.user;
}

function saveGPrefs() {

  var GNEWS_SCRIPT_FOLDER = new Folder(scriptPreferencesPath);

  if (!GNEWS_SCRIPT_FOLDER.exists) {
    GNEWS_SCRIPT_FOLDER.create();
  }

  var setStr = prefsObj();
  var filePath = GNEWS_SCRIPT_FOLDER.fullName;
  var fileName = 'preferences.json';

  return saveFile(setStr, filePath, fileName);
}

function itemSetting(aItem, settingName) {

  var str = aItem.comment;
  var n1 = str.search(settingName);
  var set = 'false';

  if (str != '' && n1 != -1) {
    var n2 = n1 + settingName.length + 2;
    set = str.substring(n2, n2 + str.length);
  }
  return eval(set);
}

function saveFile(fileContent, filePath, fileName) {

  var newFile = new File(filePath + '/' + fileName);

  newFile.open('w');
  newFile.write(fileContent);
  newFile.close();

  return newFile;
}

function readFile(file) {

  var fileContent;

  file.open('r');
  fileContent = file.read();
  file.close();

  return fileContent;
}

function prefsObj() {

  var objStr = '';
  objStr += '{\n';
  objStr += '\t"color":{';

  for (i = 0; i < grpNames.length; i++) {

    var c = rgbToHex(tabColors[i]).replace('0x', '#').toUpperCase();
    objStr += '\n\t\t"' + grpNames[i] + '":"' + c + '",';
  }
  objStr += '\n\t},\n\n';
  objStr += '\t"label":{';

  for (i = 0; i < labelColors.length; i++) {

    var l = rgbToHex(labelColors[i]).replace('0x', '#').toUpperCase(); 
    objStr += '\n\t\t"l' + (i + 1) + '":"' + l + '",';
  }
  objStr = objStr.substring(0, objStr.length-1);
  objStr += '\n\t},\n\n';
  objStr += '\t"folders":{\n';
  objStr += '\t\t"arte":"' +   artePath + '",\n';
  objStr += '\t\t"magazine":"' +   magPath + '"\n';
  objStr += '\n\t},\n\n';
  objStr += '\t"selection":{\n';
  objStr += '\t\t"layerType":' +   lDropSel + ',\n';
  objStr += '\t\t"projectModel":' +   projMDropSel + '\n';
  objStr += '\n\t},\n\n';
  objStr += '\t"user":"' +  userPrefix.toUpperCase() + '"\n';
  objStr += '}';

  return objStr;
}

function getGPrefs(file) {

  var JSONContent = readFile(file);
  var JSONObj = JSON.parse(JSONContent);

  tabColors = [];
  labelColors = [];

  for (i = 0; i < grpNames.length; i++) {

    tabColors.push(hexToRGB(JSONObj.color[grpNames[i]]));
  }

  for (i = 1; i <= 16; i++) {

    labelColors.push(hexToRGB(JSONObj.label['l' + i]));
  }
  artePath = JSONObj.folders.arte;
  magPath = JSONObj.folders.magazine;
  lDropSel = JSONObj.selection.layerType;
  projMDropSel = JSONObj.selection.projectModel;
  userPrefix = JSONObj.user;
}

function createHierarchy(array, node) {

  for (var n = 0; n < array.length; n++) {

    var dName = array[n].displayName;
    var subArray = [];

    try {
      subArray = new Folder(array[n]).getFiles();
    } catch (error) {}
      
    if (subArray.length > 0) {

      nodeItem = node.add('node', dName);
      nodeItem.image = fldTogIcon;
      
      createHierarchy(subArray, nodeItem);
    } else {

      var templateItem = node.add('item', dName);
      templateItem.image = templateListIcon;
    }
  }
}

function buildTree(folder, tree) {

  tree.remove(tree.items[0]);
  
  var templatesArray = folder.getFiles();

  var foderNode = tree.add('node', folder.displayName);
  foderNode.image = fldTogIcon;
  
  createHierarchy(templatesArray, foderNode);
}

function expandNodes(nodeTree) {

  nodeTree.expanded = true;
  var branches = nodeTree.items;

  for (var i = 0; i < branches.length; i++) {

    if (branches[i].type == 'node') {
      expandNodes(branches[i]);
    }
  }
}

function templateDialog(path) {

  var treeFolder = new Folder(path);
  
  var w = new Window('dialog', 'import options...');

  var tree = w.add('treeview', [0, 0, 250, 400]);
  buildTree(treeFolder, tree);

  var bGroup = w.add('group');
  var refreshBtn = bGroup.add('button', undefined, 'refresh');
  refreshBtn.helpTip = 'refresh list content';
  var importBtn = bGroup.add('button', undefined, 'import');
  importBtn.helpTip = 'import selected template';
  importBtn.enabled = tree.selection != null;

  tree.onChange = function () {
  
    // catNodes should not be selectable...
    if (tree.selection != null && tree.selection.type == 'node') {
      tree.selection = null;
    }
    importBtn.enabled = tree.selection != null;
  };

  w.onShow = function () {
    expandNodes(tree);
  };
      
  importBtn.onClick = function () {

    var fileName = tree.selection.toString();
    var s = tree.selection;

    // adds the parent nodes to the file name...
    while (s.parent.toString() != treeFolder.displayName) {
      
      s = s.parent;
      fileName = s.toString() + '/' + fileName;
    }
    var templateFile = new File(path + '/' + fileName);
    // import options...
    var IO = new ImportOptions(templateFile);
    app.project.importFile(IO);
    w.close();
  };

  refreshBtn.onClick = function () {

    buildTree(treeFolder, tree);
    expandNodes(tree);
  };
  
  w.show();
}

/*

---------------------------------------------------------------
> script metadata
---------------------------------------------------------------

*/

function getXMPdata(XMPfield) {

  var metaData = new XMPMeta(app.project.xmpPacket);
  var XMPSet = XMPConst.NS_DC;
  var XMPVal = '';
  var XMPProp = metaData.getProperty(XMPSet, XMPfield);

  if(XMPProp != undefined) {
    XMPVal = XMPProp.value;
  }

  return XMPVal;
}

function setXMPdata(XMPfield, XMPval) {

  var metaData = new XMPMeta(app.project.xmpPacket);
  var XMPSet = XMPConst.NS_DC;
  var XMPProp = metaData.doesPropertyExist(XMPSet, XMPfield);

  metaData.deleteProperty(XMPSet, XMPfield);
  metaData.setProperty(XMPSet, XMPfield, XMPval);

  app.project.xmpPacket = metaData.serialize();
}
