
/*

---------------------------------------------------------------
> ü™ü UI dialogs
---------------------------------------------------------------

*/

//  linter settings:
//  jshint -W061
//  jshint -W043

// import templates UI...
  function templateDialog() {
    
    var templatesPath = scriptPreferencesPath + '/templates'; // ‚Üí '~/AppData/Roaming/PROMO GNEWS script/templates'
    var downPath = scriptPreferencesPath + '/temp'; // ‚Üí '~/AppData/Roaming/PROMO GNEWS script/temp'
    var templatesFolder = new Folder(templatesPath); // ‚Üí templates folder object
    var downFolder = new Folder(downPath); // ‚Üí download folder object
    
    var wWidth; // window width without image preview...
    var oWidth; // window width with image preview...
    var previewScale = 0.25; // preview image scale factor...
    var fileFilter = ['.aep', '.aet']; // template files extensions...
    
    var w = new Window('dialog', 'import options...');
    // main group...
    var mainGrp = w.add('group');
    // left vertical group...
    var vGrp1 =  mainGrp.add('group');
    vGrp1.orientation = 'column';
    // preview vertical group...
    var vGrp2 =  mainGrp.add('group');
    vGrp2.orientation = 'column';
    vGrp2.alignChildren = 'left';
    vGrp2.visible = false;
    var tree = vGrp1.add('treeview', [0, 0, 250, 340]);
    buildTree(templatesFolder, tree, fileFilter);
    
    // buttons group...
    var bGrp = vGrp1.add('group');
    bGrp.orientation = 'stack';
    bGrp.alignment = 'fill';
    // left buttons group...
    var bGrp1 = bGrp.add('group');
    bGrp1.alignment = 'left';
    bGrp1.spacing = 2;
    // right buttons group...
    var bGrp2 = bGrp.add('group');
    bGrp2.alignment = 'right';
    // left buttons...
    var downloadBtn = bGrp1.add('iconbutton', undefined, downloadIcon, {style: 'toolbutton'});
    downloadBtn.helpTip = 'downloads the latest templates';
    var refreshBtn = bGrp1.add('iconbutton', undefined, refreshIcon, {style: 'toolbutton'});
    refreshBtn.helpTip = 'refresh list content';
    var openFldBtn = bGrp1.add('iconbutton', undefined, folderIcon, {style: 'toolbutton'});
    openFldBtn.helpTip = 'open template folder';
    // right buttons...
    var importBtn = bGrp2.add('button', undefined, 'import');
    importBtn.helpTip = 'import selected template';
    importBtn.enabled = false;
    
    // preview...
    var pathTxt = vGrp2.add ('statictext', undefined, '...');
    pathTxt.characters = 40;
    setTxtColor(pathTxt, GNEWS_mainColors[6]);
    var previewImg = vGrp2.add ('image', undefined, undefined);
    previewImg.size = [1920 * previewScale, 1080 * previewScale];
    var updateTxt = vGrp2.add('statictext', undefined, '...');
    updateTxt.characters = 40;
    setTxtColor(updateTxt, GNEWS_secColors[10]);
    // preview info...
    var infoGrp = vGrp2.add('group');
    infoGrp.orientation = 'column';
    infoGrp.spacing = 3;
    var info1Txt = infoGrp.add('statictext', undefined, '...');
    info1Txt.characters = 40;
    setTxtColor(info1Txt, GNEWS_secColors[8]);
    var info2Txt = infoGrp.add('statictext', undefined, '...');
    info2Txt.characters = 40;
    setTxtColor(info2Txt, GNEWS_secColors[8]);
    
    tree.onChange = function () {
      
      // node folders should not be selectable...
      if (tree.selection != null && tree.selection.type == 'node') {
        tree.selection = null; // ‚Üí clear selection
      }
      importBtn.enabled = tree.selection != null; // ‚Üí enable | disable import button
      if (tree.selection == null) {
        // nothing selected...
        w.size.width = wWidth; // ‚Üí resize window
        vGrp2.visible = false; // ‚Üí hide preview
        return;
      }
      // template selected...
      var s = tree.selection; // ‚Üí selected template
      var templateName = s.toString();

      // iterate selection parent + parent + parent... to form selected template file path...
      while (s.parent.toString() != templatesFolder.displayName) {
        s = s.parent; // current parent...
        templateName = s.toString() + '/' + templateName; // ‚Üí 'current parent/.../template name'
      }
      var imgName = templateName
        .replace(/\.[\w]+$/i, ' preview.png'); // ‚Üí template preview.png
      var infoName = templateName
        .replace(/\.[\w]+$/i, ' info.txt'); // ‚Üí template info.png

      var templateFile = new File(templatesPath + '/' + templateName); // ‚Üí template file object
      var previewImgFile = new File(templatesPath + '/' + imgName); // ‚Üí preview image object
      var infoFile = new File(templatesPath + '/' + infoName); // ‚Üí info file object

      var fWidth = wWidth; 
      var infoContent = ['...', '...']; // info placeholder text...
      
      if (infoFile.exists) {
        infoFile.open('r'); // ‚Üí open file
        infoFile.encoding = 'UTF-8'; // ‚Üí file encoding
        infoContent = infoFile
          .read()
          .toString()
          .split(/[\n|\r]+/); // text content as array ‚Üí ['line1', 'line2']
      }
      if (previewImgFile.exists) {
        vGrp2.visible = true; // ‚Üí show preview
        previewImg.image = previewImgFile; // ‚Üí set preview image file
      }
      w.size.width = oWidth; // ‚Üí resize window
      pathTxt.text = 'templates/'+ templateName; // ‚Üí 'templates/.../template name'
      updateTxt.text = 'updated on: ' + templateFile.created.toString(); // ‚Üí 'updated on: date and time'
      info1Txt.text = '>> ' + infoContent[0]; // ‚Üí '>> info line 1'
      info2Txt.text = '>> ' + infoContent[1]; // ‚Üí '>> info line 2'
    };
  
    w.onShow = function () {
      expandNodes(tree); // expand all tree folder nodes...
      oWidth = w.size.width; // window width with image preview...
      wWidth = oWidth - 490; // window width without image preview...
      vGrp2.visible = false; // ‚Üí hide preview
      w.size.width = wWidth; // ‚Üí resize window
    };
        
    importBtn.onClick = function () {
  
      var s = tree.selection; // ‚Üí current selection
      var fileName = s.toString();

      // iterate selection parent + parent + parent... to form selected template file path...
      while (s.parent.toString() != templatesFolder.displayName) {
        s = s.parent; // current parent...
        fileName = s.toString() + '/' + fileName; // ‚Üí current parent/.../template name
      }
      var templateFile = new File(templatesPath + '/' + fileName); // ‚Üí template file object

      var IO = new ImportOptions(templateFile); // import options...
      app.project.importFile(IO); // ‚Üí import template project
      w.close(); // ‚Üí close window
    };
  
    downloadBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no network...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }
      var url = repoURL + '/raw/main/templates.zip';

      var zipPath = downPath + '/templates.zip'; // ‚Üí ~AppData\Roaming\PROMO GNEWS script\temp\templates.zip

      if (!downFolder.exists) {
        // downloads folder does not exist...
        downFolder.create(); // ‚Üí create downloads folder
      }
      getURLContent([url], [downPath]); // ‚Üí downloads content
      unzipContent(zipPath, templatesPath); // ‚Üí unzip file
      buildTree(templatesFolder, tree, fileFilter); // ‚Üí update tree
      expandNodes(tree); // expand all tree folder nodes...
    };
  
    refreshBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no access...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }
      buildTree(templatesFolder, tree, fileFilter); // ‚Üí update tree
      expandNodes(tree); // expand all tree folder nodes...
    };
  
    openFldBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no access...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }
      if (!templatesFolder.exists) {
        // template folder does not exist...
        templatesFolder.create(); // ‚Üí create template folder
      }
      openFolder(templatesPath); // ‚Üí open template folder
    };
  
    w.show();
  }
  
  // organization tags UI...
  function tagDialog() {

    // ‚Üí [tag, icon]
    // comments just for comp itens...
    var compCommentTags = [
      ['export', 'ftgTogIcon'],
      ['edit', 'compTogIcon'],
      ['ignore', 'solTogIcon']
    ];
    // comments for footage itens or template names for comp itens...
    var multiTags = [
      ['bg', 'imgTogIcon'],
      ['photo', 'imgTogIcon'],
      ['ref', 'imgTogIcon'],
      ['logo', 'shpTogIcon'],
      ['icon', 'shpTogIcon'],
      ['texture', 'matteTogIcon'],
      ['pattern', 'matteTogIcon'],
      ['tile', 'matteTogIcon'],
      ['lettering', 'txtTogIcon'],
      ['music', 'sonoTogIcon'],
      ['loc', 'sonoTogIcon']
    ];
    // template names for comp itens...
    var compTemplateTags = [
      ['end page', 'compTogIcon'],
      ['opening', 'compTogIcon']
    ];

    // TODO: loop folder item contents...

    // Ui definition...
    // window...
    var tagWindow = 'var w = new Window(\'palette\', \'org. tags...\');\
var mainGrp = w.add(\'group\');\
mainGrp.orientation = \'column\';\
mainGrp.spacing = 2;\
mainGrp.alignChildren = \'left\';\n\n';

    // comp comment buttons...
    for (var c = 0; c < compCommentTags.length; c++) {
      tagWindow += 'var compComTagGrp'+ c +' = mainGrp.add(\'group\');\
var compComTagBtn'+ c +' = compComTagGrp'+ c +'.add(\'iconbutton\', undefined, ' + compCommentTags[c][1] + ', {style: \'toolbutton\'});\
compComTagBtn'+ c +'.helpTip = \'' + compCommentTags[c][0] + ' comp comment tag\';\
var compComTag'+ c +'Txt = compComTagGrp'+ c +'.add(\'statictext\', undefined, \'' + compCommentTags[c][0] + '\');\
setTxtColor(compComTag'+ c +'Txt, GNEWS_secColors[10]);\n\n';
    }
    // template buttons...
    for (var b = 0; b < multiTags.length; b++) {
      tagWindow += 'var multiTagGrp'+ b +' = mainGrp.add(\'group\');\
var multiTagBtn'+ b +' = multiTagGrp'+ b +'.add(\'iconbutton\', undefined, ' + multiTags[b][1] + ', {style: \'toolbutton\'});\
multiTagBtn'+ b +'.helpTip = \'' + multiTags[b][0] + ' tag\';\
var multiTag'+ b +'Txt = multiTagGrp'+ b +'.add(\'statictext\', undefined, \'' + multiTags[b][0] + '\');\
setTxtColor(multiTag'+ b +'Txt, GNEWS_secColors[9]);\n\n';
    }
    // template buttons...
    for (var p = 0; p < compTemplateTags.length; p++) {
      tagWindow += 'var temTagGrp'+ p +' = mainGrp.add(\'group\');\
var temTagBtn'+ p +' = temTagGrp'+ p +'.add(\'iconbutton\', undefined, ' + compTemplateTags[p][1] + ', {style: \'toolbutton\'});\
temTagBtn'+ p +'.helpTip = \'' + compTemplateTags[p][0] + ' template tag\';\
var temTag'+ p +'Txt = temTagGrp'+ p +'.add(\'statictext\', undefined, \'' + compTemplateTags[p][0] + '\');\
setTxtColor(temTag'+ p +'Txt, GNEWS_secColors[8]);\n\n\n';
    }
    // click events...
    for (var t = 0; t < compCommentTags.length; t++) {
      tagWindow += 'compComTagBtn'+ t +'.onClick = function () {\
\tif (app.project.selection.length == 0) {return;}\
\tfor (var i = 0; i < app.project.selection.length; i++) {\
\t\tif (!(app.project.selection[i] instanceof CompItem)) {continue;}\
\t\tapp.project.selection[i].comment = \'' + compCommentTags[t][0] + ': true\';\
\t}\n};\n';
    }

    for (var m = 0; m < multiTags.length; m++) {
      tagWindow += 'multiTagBtn'+ m +'.onClick = function () {\
\tif (app.project.selection.length == 0) {return;}\
\tfor (var i = 0; i < app.project.selection.length; i++) {\
\t\tif (app.project.selection[i] instanceof CompItem) {\
\t\t\tapp.project.selection[i].motionGraphicsTemplateName = \'' + multiTags[m][0] + '\';\
\t\t}\
\t\tif (app.project.selection[i] instanceof FootageItem) {\
\t\t\tapp.project.selection[i].comment = \'' + multiTags[m][0] + ': true\';\
\t\t}\
\t}\n};\n';
    }

    for (var k = 0; k < compTemplateTags.length; k++) {
      tagWindow += 'temTagBtn'+ k +'.onClick = function () {\
\tif (app.project.selection.length == 0) {return;}\
\tfor (var i = 0; i < app.project.selection.length; i++) {\
\t\tif (!(app.project.selection[i] instanceof CompItem)) {continue;}\
\t\tapp.project.selection[i].motionGraphicsTemplateName = \'' + compTemplateTags[k][0] + '\';\
\t}\n};\n';
    }

    tagWindow += 'w.show();';

    eval(tagWindow); // ‚Üí eval Ui definition
  }
  
  // organization tags UI...
  function endPagePresetDialog(obj) {

    var presetPath = scriptPreferencesPath + '/templates/ON-AIR/end page/end page presets';
    var presetFolder = new Folder(presetPath);
    
    var layout = obj.layout_end_page;
    var servico = obj.servico_end_page;
    var aparencia = obj.aparencia_end_page;
    // Ui definition...
    // window...
    
    function getPresetNames() {
      
      presetDdl.removeAll();
      presetDdl.add('item', 'new end page preset');

      var filesArray = presetFolder.getFiles();
      var presetArray = ['new end page preset'];
      
      for (var f = 0; f < filesArray.length; f++) {
        var fileName = deleteFileExt(filesArray[f].displayName);
        presetDdl.add('item', fileName);
        presetArray.push(fileName);
      }
      presetDdl.selection = 0;
      return presetArray;
    }

    function getLayers(compName, dropdown) {

      dropdown.removeAll();
      dropdown.add('item', '-------');

      var layersArray = ['-------'];

      try {
        var aItem = app.project.activeItem;
        var patComp = aItem.layer(compName).source;
  
        for (var l = 1; l <= patComp.numLayers; l++) {
          var layerName = patComp.layer(l).name;

          if (layerName == 'adj_') continue;
          layersArray.push(layerName);
          dropdown.add('item', layerName);
        }
      } catch (error) {}

      return layersArray;
    }

    function showLayer(compName, dropdown) {

      var selectedName = dropdown.selection;
      var selectedLayerName = '-------';
      try {
        var aItem = app.project.activeItem;
        var patComp = aItem.layer(compName).source;
  
        for (var l = 1; l <= patComp.numLayers; l++) {
          var layerName = patComp.layer(l).name;

          if (layerName == 'adj_') continue;
          patComp.layer(l).enabled = false;
          if (layerName.match(selectedName)) {
            patComp.layer(l).enabled = true;
            selectedLayerName = selectedName;
          }
        }
      } catch (error) {}

      return selectedLayerName;
    }

    function updateUi() {
      
      modelo_layoutDdl.selection = layout.modelo - 1;
      subtitulo_layout.value = layout.subtitulo;
      foto_layout.value = layout.foto;
      footage_layout.value = layout.footage;
      pattern_layout.value = layout.pattern;

      titulo_servico.text = servico.titulo;
      hora_servico.text = servico.hora;
      min_servico.text = servico.min;

      tema_aparenciaDdl.selection = aparencia.tema - 1;

      obj.aparencia_end_page = buildFxObj().aparencia_end_page;
      aparencia = obj.aparencia_end_page;
      
      updateColors();
    }

    function updateCompFx() {

      try {
        var aItem = app.project.activeItem;
        var layoutFx = aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('layout end page');
        layoutFx
          .property('subtitulo')
          .setValue(layout.subtitulo);
        layoutFx
          .property('foto')
          .setValue(layout.foto);
        layoutFx
          .property('footage')
          .setValue(layout.footage);
        layoutFx
          .property('pattern')
          .setValue(layout.pattern);
      } catch (error) {}
    }

    function updateCompColors() {

      try {
        var aItem = app.project.activeItem;
        var aparenciaFx = aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('aparencia end page');
        aparenciaFx
          .property('logo')
          .setValue(hexToRGB(aparencia.logo));
        aparenciaFx
          .property('titulo')
          .setValue(hexToRGB(aparencia.titulo));
        aparenciaFx
          .property('subtitulo')
          .setValue(hexToRGB(aparencia.subtitulo));
        aparenciaFx
          .property('apoio')
          .setValue(hexToRGB(aparencia.apoio));
        aparenciaFx
          .property('horario')
          .setValue(hexToRGB(aparencia.horario));
        aparenciaFx
          .property('horario base')
          .setValue(hexToRGB(aparencia.horario_base));
        aparenciaFx
          .property('footage')
          .setValue(hexToRGB(aparencia.footage));
        aparenciaFx
          .property('pattern')
          .setValue(hexToRGB(aparencia.pattern));
        aparenciaFx
          .property('fundo')
          .setValue(hexToRGB(aparencia.fundo));
      } catch (error) {}
    }

    function updateColors() {

      setTxtColor(logo_aparencia, hexToRGB(aparencia.logo));
      logo_aparencia.text = aparencia.logo;
      setTxtColor(titulo_aparencia, hexToRGB(aparencia.titulo));
      titulo_aparencia.text = aparencia.titulo;
      setTxtColor(subtitulo_aparencia, hexToRGB(aparencia.subtitulo));
      subtitulo_aparencia.text = aparencia.subtitulo;
      setTxtColor(apoio_aparencia, hexToRGB(aparencia.apoio));
      apoio_aparencia.text = aparencia.apoio;
      setTxtColor(horario_aparencia, hexToRGB(aparencia.horario));
      horario_aparencia.text = aparencia.horario;
      setTxtColor(horario_base_aparencia, hexToRGB(aparencia.horario_base));
      horario_base_aparencia.text = aparencia.horario_base;
      setTxtColor(footage_aparencia, hexToRGB(aparencia.footage));
      footage_aparencia.text = aparencia.footage;
      setTxtColor(pattern_aparencia, hexToRGB(aparencia.pattern));
      pattern_aparencia.text = aparencia.pattern;
      setTxtColor(fundo_aparencia, hexToRGB(aparencia.fundo));
      fundo_aparencia.text = aparencia.fundo;
    }

    var w = new Window('palette', 'end page preset...');
    w.spacing = 30;
    var preset_mainGrp = w.add('group');
    var presetDdl = preset_mainGrp.add('dropdownlist', [0,0,180,10], []);

    var layout_mainGrp = w.add('group');
    layout_mainGrp.orientation = 'column';
    layout_mainGrp.spacing = 10;
    var layoutTxt = layout_mainGrp.add('statictext', undefined, '- LAYOUT -');
    setTxtColor(layoutTxt, GNEWS_secColors[8]);
    var modelo_layoutDdl = layout_mainGrp.add('dropdownlist', [0,0,180,10], ['livre','programa','jornal']);
    modelo_layoutDdl.selection = layout.modelo - 1;

    var layoutGrp = layout_mainGrp.add('group');
    layoutGrp.orientation = 'stack';
    layoutGrp.alignment = 'fill';

    var layoutGrp1 = layoutGrp.add('group');
    layoutGrp1.orientation = 'column';
    layoutGrp1.spacing = 2;
    layoutGrp1.alignment = 'left';
    var layoutGrp2 = layoutGrp.add('group');
    layoutGrp2.orientation = 'column';
    layoutGrp2.spacing = 2;
    layoutGrp2.alignment = 'right';

    var subtitulo_layoutGrp = layoutGrp1.add('group');
    var subtitulo_layout = subtitulo_layoutGrp.add('checkbox', undefined, '');
    subtitulo_layout.value = layout.subtitulo;
    var subtitulo_layoutTxt = subtitulo_layoutGrp.add('statictext', undefined, 'subtitulo');
    subtitulo_layoutTxt.characters = 6;
    setTxtColor(subtitulo_layoutTxt, GNEWS_mainColors[7]);

    var foto_layoutGrp = layoutGrp1.add('group');
    var foto_layout = foto_layoutGrp.add('checkbox', undefined, '');
    foto_layout.value = layout.foto;
    var foto_layoutTxt = foto_layoutGrp.add('statictext', undefined, 'foto');
    foto_layoutTxt.characters = 6;
    setTxtColor(foto_layoutTxt, GNEWS_mainColors[7]);

    var footage_layoutGrp = layoutGrp2.add('group');
    var footage_layout = footage_layoutGrp.add('checkbox', undefined, '');
    footage_layout.value = layout.footage;
    var footage_layoutTxt = footage_layoutGrp.add('statictext', undefined, 'footage');
    footage_layoutTxt.characters = 6;
    setTxtColor(footage_layoutTxt, GNEWS_mainColors[7]);

    var pattern_layoutGrp = layoutGrp2.add('group');
    var pattern_layout = pattern_layoutGrp.add('checkbox', undefined, '');
    pattern_layout.value = layout.pattern;
    var pattern_layoutTxt = pattern_layoutGrp.add('statictext', undefined, 'pattern');
    pattern_layoutTxt.characters = 6;
    setTxtColor(pattern_layoutTxt, GNEWS_mainColors[7]);
    
    var foto_layoutDdl = layoutGrp1.add('dropdownlist', [0,0,85,10], []);
    foto_layoutDdl.selection = 0;
    foto_layoutDdl.enabled = foto_layout.value;
    var pattern_layoutDdl = layoutGrp2.add('dropdownlist', [0,0,85,10], []);
    pattern_layoutDdl.selection = 0;
    pattern_layoutDdl.enabled = pattern_layout.value;

    var servico_mainGrp = w.add('group');
    servico_mainGrp.orientation = 'column';
    servico_mainGrp.spacing = 6;

    var servicoTxt = servico_mainGrp.add('statictext', undefined, '- SERVICO -');
    setTxtColor(servicoTxt, GNEWS_secColors[8]);

    var titulo_servico = servico_mainGrp.add('edittext', [0,0,180,40], servico.titulo, {multiline: true});

    var servicoGrp = servico_mainGrp.add('group');
    servicoGrp.orientation = 'column';
    servicoGrp.spacing = 2;
    var horario_servicoGrp = servicoGrp.add('group');
    var hora_servico = horario_servicoGrp.add('edittext', [0,0,40,20], servico.hora);
    var hora_servicoTxt = horario_servicoGrp.add('statictext', undefined, '[hora]');
    setTxtColor(hora_servicoTxt, GNEWS_mainColors[7]);
    var min_servico = horario_servicoGrp.add('edittext', [0,0,40,20], servico.min);
    var min_servicoTxt = horario_servicoGrp.add('statictext', undefined, '[min]');
    setTxtColor(min_servicoTxt, GNEWS_mainColors[7]);

    var aparencia_mainGrp = w.add('group');
    aparencia_mainGrp.orientation = 'column';
    aparencia_mainGrp.spacing = 10;

    var aparenciaTxt = aparencia_mainGrp.add('statictext', undefined, '- APARENCIA -');
    setTxtColor(aparenciaTxt, GNEWS_secColors[8]);
    var tema_aparenciaGrp = aparencia_mainGrp.add('group');
    tema_aparenciaGrp.alignChildren = 'left';
    var tema_aparenciaDdl = tema_aparenciaGrp.add('dropdownlist', [0,0,180,10], ['claro','cinza','escuro','vermelho','- cores livres -']);
    tema_aparenciaDdl.selection = aparencia.tema - 1;

    var aparenciaGrp = aparencia_mainGrp.add('group');
    aparenciaGrp.orientation = 'stack';
    aparenciaGrp.alignment = 'fill';
    var aparenciaGrp1 = aparenciaGrp.add('group');
    aparenciaGrp1.orientation = 'column';
    aparenciaGrp1.spacing = 2;
    aparenciaGrp1.alignment = 'left';
    var aparenciaGrp2 = aparenciaGrp.add('group');
    aparenciaGrp2.orientation = 'column';
    aparenciaGrp2.spacing = 2;
    aparenciaGrp2.alignment = 'center';
    var aparenciaGrp3 = aparenciaGrp.add('group');
    aparenciaGrp3.orientation = 'column';
    aparenciaGrp3.spacing = 2;
    aparenciaGrp3.alignment = 'right';
    
    var logo_aparencia = aparenciaGrp1.add('statictext', undefined, '');
    logo_aparencia.helpTip = 'logo';
    logo_aparencia.characters = 5;
    var titulo_aparencia = aparenciaGrp1.add('statictext', undefined, '');
    titulo_aparencia.helpTip = 'titulo';
    titulo_aparencia.characters = 5;
    var subtitulo_aparencia = aparenciaGrp1.add('statictext', undefined, '');
    subtitulo_aparencia.helpTip = 'subtitulo';
    subtitulo_aparencia.characters = 5;
    var apoio_aparencia = aparenciaGrp2.add('statictext', undefined, '');
    apoio_aparencia.helpTip = 'apoio';
    apoio_aparencia.characters = 5;
    var horario_aparencia = aparenciaGrp2.add('statictext', undefined, '');
    horario_aparencia.helpTip = 'horario';
    horario_aparencia.characters = 5;
    var horario_base_aparencia = aparenciaGrp2.add('statictext', undefined, '');
    horario_base_aparencia.helpTip = 'horario base';
    horario_base_aparencia.characters = 5;
    var footage_aparencia = aparenciaGrp3.add('statictext', undefined, '');
    footage_aparencia.helpTip = 'footage';
    footage_aparencia.characters = 5;
    var pattern_aparencia = aparenciaGrp3.add('statictext', undefined, '');
    pattern_aparencia.helpTip = 'pattern';
    pattern_aparencia.characters = 5;
    var fundo_aparencia = aparenciaGrp3.add('statictext', undefined, '');
    fundo_aparencia.helpTip = 'fundo';
    fundo_aparencia.characters = 5;

    var bGrp = w.add('group');
    bGrp.orientation = 'stack';
    bGrp.alignment = 'fill';
  
    var bGrp1 = bGrp.add('group');
    bGrp1.alignment = 'left';
    bGrp1.spacing = 2;
  
    var bGrp2 = bGrp.add('group');
    bGrp2.alignment = 'right';
  
    var refreshBtn = bGrp1.add('iconbutton', undefined, refreshIcon, {style: 'toolbutton'});
    refreshBtn.helpTip = 'pull comp changes';
    var openBtn = bGrp1.add('iconbutton', undefined, folderIcon, {style: 'toolbutton'});
    openBtn.helpTip = 'open end page presets folder';
    var saveBtn = bGrp2.add('button', undefined, 'save');
    saveBtn.helpTip = 'save new end page preset JSON file';

    w.onShow = function () {

      updateColors();
      
      getPresetNames();
      var patternArray = getLayers('comp_pattern', pattern_layoutDdl);
      var p = patternArray.indexOf(layout.pattern_layer);
      
      if (p >= 0) {
        pattern_layoutDdl.selection = p;
      }

      var fotoArray = getLayers('comp_img apresentador', foto_layoutDdl);
      var f = fotoArray.indexOf(layout.foto_layer);
      
      if (f >= 0) {
        foto_layoutDdl.selection = f;
      }
    };

    foto_layoutDdl.onChange = function() {

      var sLayer = showLayer('comp_img apresentador', foto_layoutDdl);
      layout.foto_layer = sLayer;
    };

    pattern_layoutDdl.onChange = function() {

      var sLayer = showLayer('comp_pattern', pattern_layoutDdl);
      layout.pattern_layer = sLayer;
    };

    presetDdl.onChange = function() {

      var fileName = presetDdl.selection.toString();
      var presetFile = new File(presetPath + '/' + fileName + '.json');

      if (!presetFile.exists) {return;}

      var presetStr = readFile(presetFile);
      obj = JSON.parse(presetStr);

      layout = obj.layout_end_page;
      servico = obj.servico_end_page;
      aparencia = obj.aparencia_end_page;

      updateCompColors();
      updateUi();
      updateCompFx();

      try {
        var aItem = app.project.activeItem;
        var titulo = titulo_servico.text;
        aItem.layer('txt_titulo')
          .property('ADBE Text Properties')
          .property('ADBE Text Document')
          .setValue(titulo);
        var hora = hora_servico.text
          .replace(/\D/g, '');
        hora = parseInt(hora);
        hora = (hora < 23) ? hora : 23;
        aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('servico end page')
          .property('[hora]')
          .setValue(hora);
        var min = min_servico.text
          .replace(/\D/g, '');
        min = parseInt(min);
        min = (min < 59) ? min : 59;
        aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('servico end page')
          .property('[min]')
          .setValue(min);  
      } catch (error) {}
    };

    modelo_layoutDdl.onChange = function() {

      try {
        var aItem = app.project.activeItem;
        var i = modelo_layoutDdl.selection.index + 1;
        var modeloFx = aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('layout end page')
          .property('modelo')
          .setValue(i);
        
        layout.modelo = i;

      } catch (error) {
        modelo_layoutDdl.selection = layout.modelo - 1;
      }
    };

    titulo_servico.onChanging = function() {

      try {
        var aItem = app.project.activeItem;
        var titulo = titulo_servico.text;
        aItem.layer('txt_titulo')
          .property('ADBE Text Properties')
          .property('ADBE Text Document')
          .setValue(titulo);
        
      } catch (error) {
        titulo_servico.text = servico.titulo;
      }
       
    };

    titulo_servico.onChange = function() {

      try {
        var aItem = app.project.activeItem;
        var titulo = aItem.layer('txt_titulo')
          .property('ADBE Text Properties')
          .property('ADBE Text Document');
        servico.titulo = titulo.value;
        titulo_servico.text = servico.titulo;

      } catch (error) {}
    };

    hora_servico.onChanging = function() {

      try {
        var aItem = app.project.activeItem;
        var hora = hora_servico.text
          .replace(/\D/g, '');
        hora = parseInt(hora);
        hora = (hora < 23) ? hora : 23;
        aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('servico end page')
          .property('[hora]')
          .setValue(hora);

        servico.hora = hora;

      } catch (error) {
        hora_servico.text = servico.hora;
      }  
    };

    hora_servico.onChange = function() {

      try {
        var aItem = app.project.activeItem;
        var hora = aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('servico end page')
          .property('[hora]');

        hora_servico.text = hora.value;

      } catch (error) {}  
    };

    min_servico.onChanging = function() {

      try {
        var aItem = app.project.activeItem;
        var min = min_servico.text
          .replace(/\D/g, '');
        min = parseInt(min);
        min = (min < 59) ? min : 59;
        aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('servico end page')
          .property('[min]')
          .setValue(min);

        servico.min = min;

      } catch (error) {
        min_servico.text = servico.min;
      }  
    };

    min_servico.onChange = function() {

      try {
        var aItem = app.project.activeItem;
        var min = aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('servico end page')
          .property('[min]');

        min_servico.text = min.value;

      } catch (error) {}  
    };

    tema_aparenciaDdl.onChange = function() {

      try {
        var aItem = app.project.activeItem;
        var i = tema_aparenciaDdl.selection.index + 1;
        var temaFx = aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('aparencia end page')
          .property('tema')
          .setValue(i);
        
        updateColors();

      } catch (error) {
        tema_aparenciaDdl.selection = aparencia.tema - 1;
      }
    };

    subtitulo_layout.onClick = function() {

      try {
        var aItem = app.project.activeItem;
        var val = subtitulo_layout.value;
        var subtituloFx = aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('layout end page')
          .property('subtitulo')
          .setValue(val);

        layout.subtitulo = val;

      } catch (error) {
        subtitulo_layout.value = layout.subtitulo;
      }
    };

    foto_layout.onClick = function() {

      try {
        var aItem = app.project.activeItem;
        var val = foto_layout.value;
        var fotoFx = aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('layout end page')
          .property('foto')
          .setValue(val);

        layout.foto = val;
        foto_layoutDdl.enabled = val;
        
        if (!foto_layout.value) {
          layout.foto_layer = '-------';
          return;
        }
        layout.foto_layer = foto_layoutDdl.selection;
      } catch (error) {
        foto_layout.value = layout.foto;
      }
    };

    footage_layout.onClick = function() {

      try {
        var aItem = app.project.activeItem;
        var val = footage_layout.value;
        var footageFx = aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('layout end page')
          .property('footage')
          .setValue(val);

        layout.footage = val;

      } catch (error) {
        footage_layout.value = layout.footage;
      }
    };

    pattern_layout.onClick = function() {

      try {
        var aItem = app.project.activeItem;
        var val = pattern_layout.value;
        var patternFx = aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('layout end page')
          .property('pattern')
          .setValue(val);

        layout.pattern = val;
        pattern_layoutDdl.enabled = val;
        
        if (!pattern_layout.value) {
          layout.pattern_layer = '-------';
          return;
        }
        layout.pattern_layer = pattern_layoutDdl.selection;

      } catch (error) {
        pattern_layout.value = layout.pattern;
      }
    };

    refreshBtn.onClick = function() {
    
      presetDdl.selection = 0;

      try {
        var aItem = app.project.activeItem;
        var titulo = aItem.layer('txt_titulo')
          .property('ADBE Text Properties')
          .property('ADBE Text Document')
          .value;
        titulo_servico.text = titulo;
        var hora = aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('servico end page')
          .property('[hora]')
          .value;
        hora_servico.text = hora;
        var min = aItem.layer('ctrl_comp')
          .property('ADBE Effect Parade')
          .property('servico end page')
          .property('[min]')
          .value;
        min_servico.text = min;
      } catch (error) {}

      updateUi();
    };
  
    saveBtn.onClick = function() {
    
      var fileName = titulo_servico.text
        .replace(/\s+/g, ' ')
        .toLowerCase()
        .trim();
      var filePath = presetPath + '/' + fileName + '.json';
      var presetStr = endPageObjToString(obj);
      saveFile(presetStr, filePath);

      var presetArray = getPresetNames();
      
      if (presetArray.indexOf(fileName) < 0) {return;}

      presetDdl.selection = presetArray.indexOf(fileName);
    };

    openBtn.onClick = function() {
    
      openFolder(presetPath);
    };

    w.show();
  }
  
  // install fonts UI...
  function fontsDialog() {
  
    var fontsPath = scriptPreferencesPath + '/fonts';
    var fontsFolder = new Folder(fontsPath);

    var downPath = scriptPreferencesPath + '/temp';
    var downFolder = new Folder(downPath);
  
    // UI definition...
    var w = new Window('dialog', 'font options...');
    // treeview...
    var tree = w.add('treeview', [0, 0, 250, 380]);
  
    // creates all the 'treeview nodes'...
    buildFontTree(fontsFolder, tree);
  
    // buttons group...
    var bGrp = w.add('group');
    bGrp.orientation = 'stack';
    bGrp.alignment = 'fill';
    // left buttons group...
    var bGrp1 = bGrp.add('group');
    bGrp1.alignment = 'left';
    bGrp1.spacing = 2;
    // right buttons group...
    var bGrp2 = bGrp.add('group');
    bGrp2.alignment = 'right';
    // left buttons...
    var downloadBtn = bGrp1.add('iconbutton', undefined, downloadIcon, {style: 'toolbutton'});
    downloadBtn.helpTip = 'downloads the latest templates';
    var refreshBtn = bGrp1.add('iconbutton', undefined, refreshIcon, {style: 'toolbutton'});//bGroup.add('button', undefined, 'refresh');
    refreshBtn.helpTip = 'refresh list content';
    var openFldBtn = bGrp1.add('iconbutton', undefined, folderIcon, {style: 'toolbutton'});//bGroup.add('button', undefined, 'refresh');
    openFldBtn.helpTip = 'open fonts folder';
    // right buttons...
    var installBtn = bGrp2.add('button', undefined, 'install');
    installBtn.helpTip = 'install selected fonts';
    installBtn.enabled = false; // ‚Üí disable install button
  
    tree.onChange = function () {
  
      // node folders should not be selectable...
      if (tree.selection != null && tree.selection.type == 'node') {
        tree.selection = null; // ‚Üí clear selection
      }
      installBtn.enabled = tree.selection != null; // ‚Üí enable | disable install button
    };
  
    // expands every node from the start...
    w.onShow = function () {
      expandNodes(tree);
    };
  
    // font installation...
    installBtn.onClick = function () {
  
      var fontFamilyName = tree.selection.toString();
      var fontFamilyPath = fontsPath + '/' + fontFamilyName;
      var fontFamilyFolder = new Folder(fontFamilyPath);
  
      // checks if there is a system folder correspondent to the selection...
      if (fontFamilyFolder.exists) {
        return;
      }
      // install the selected font family on Windows...
      if (appOs == 'Win') {
        installFonts(fontFamilyPath.toString());
      }
    };
  
    // download and merge/overwrite files on the preferences font folder...
    downloadBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no network...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }
      var url = repoURL + '/raw/main/fonts.zip';
      var zipPath = downPath + '/fonts.zip';
      
      if (!downFolder.exists) {
        downFolder.create();
      }
      getURLContent([url], [downPath]);
      unzipContent(zipPath, fontsPath);
      buildFontTree(fontsFolder, tree);
      expandNodes(tree);  
    };
  
    refreshBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no access...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }
      buildFontTree(fontsFolder, tree);
      expandNodes(tree);
    };

    openFldBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no access...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }      
      if (!fontsFolder.exists) {
        fontsFolder.create();
      }
      openFolder(fontsPath);
    };
    
    w.show();
  }
  