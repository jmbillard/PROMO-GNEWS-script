
/*

---------------------------------------------------------------
> ü™ü UI dialogs
---------------------------------------------------------------

*/

//  linter settings:
//  jshint -W061
//  jshint -W043

// import templates UI...
function templateDialog() {

    var templatesPath = scriptPreferencesPath + '/templates'; // ‚Üí '~/AppData/Roaming/PROMO GNEWS script/templates'
    var downPath = scriptPreferencesPath + '/temp'; // ‚Üí '~/AppData/Roaming/PROMO GNEWS script/temp'
    var templatesFolder = new Folder(templatesPath); // ‚Üí templates folder object
    var downFolder = new Folder(downPath); // ‚Üí download folder object

    var wWidth; // window width without image preview...
    var oWidth; // window width with image preview...
    var previewScale = 0.25; // preview image scale factor...
    var fileFilter = ['.aep', '.aet']; // template files extensions...
    
    var w = new Window('dialog', 'import options...');
    // main group...
    var mainGrp = w.add('group');
    // left vertical group...
    var vGrp1 =  mainGrp.add('group');
    vGrp1.orientation = 'column';
    // preview vertical group...
    var vGrp2 =  mainGrp.add('group');
    vGrp2.orientation = 'column';
    vGrp2.alignChildren = 'left';
    vGrp2.visible = false;
    var tree = vGrp1.add('treeview', [0, 0, 250, 340]);
    buildTree(templatesFolder, tree, fileFilter);
  
    // buttons group...
    var bGrp = vGrp1.add('group');
    bGrp.orientation = 'stack';
    bGrp.alignment = 'fill';
    // left buttons group...
    var bGrp1 = bGrp.add('group');
    bGrp1.alignment = 'left';
    bGrp1.spacing = '2';
    // right buttons group...
    var bGrp2 = bGrp.add('group');
    bGrp2.alignment = 'right';
    // left buttons...
    var downloadBtn = bGrp1.add('iconbutton', undefined, downloadIcon, {style: 'toolbutton'});
    downloadBtn.helpTip = 'downloads the latest templates';
    var refreshBtn = bGrp1.add('iconbutton', undefined, refreshIcon, {style: 'toolbutton'});
    refreshBtn.helpTip = 'refresh list content';
    var openFldBtn = bGrp1.add('iconbutton', undefined, folderIcon, {style: 'toolbutton'});
    openFldBtn.helpTip = 'open template folder';
    // right buttons...
    var importBtn = bGrp2.add('button', undefined, 'import');
    importBtn.helpTip = 'import selected template';
    importBtn.enabled = false;
  
    // preview...
    var pathTxt = vGrp2.add ('statictext', undefined, '...');
    pathTxt.characters = 40;
    setTxtColor(pathTxt, GNEWS_GRA3);
    var previewImg = vGrp2.add ('image', undefined, undefined);
    previewImg.size = [1920 * previewScale, 1080 * previewScale];
    var updateTxt = vGrp2.add('statictext', undefined, '...');
    updateTxt.characters = 40;
    setTxtColor(updateTxt, GNEWS_SEC11);
    // preview info...
    var infoGrp = vGrp2.add('group');
    infoGrp.orientation = 'column';
    infoGrp.spacing = 3;
    var info1Txt = infoGrp.add('statictext', undefined, '...');
    info1Txt.characters = 40;
    setTxtColor(info1Txt, GNEWS_SEC9);
    var info2Txt = infoGrp.add('statictext', undefined, '...');
    info2Txt.characters = 40;
    setTxtColor(info2Txt, GNEWS_SEC9);
  
    tree.onChange = function () {
      
      // node folders should not be selectable...
      if (tree.selection != null && tree.selection.type == 'node') {
        tree.selection = null; // ‚Üí clear selection
      }
      importBtn.enabled = tree.selection != null; // ‚Üí enable | disable import button
      if (tree.selection == null) {
        // nothing selected...
        w.size.width = wWidth; // ‚Üí resize window
        vGrp2.visible = false; // ‚Üí hide preview
        return;
      }
      // template selected...
      var s = tree.selection; // ‚Üí selected template
      var templateName = s.toString();

      // iterate selection parent + parent + parent... to form selected template file path...
      while (s.parent.toString() != templatesFolder.displayName) {
        s = s.parent; // current parent...
        templateName = s.toString() + '/' + templateName; // ‚Üí 'current parent/.../template name'
      }
      var imgName = templateName
        .replace(/\.[\w]+$/i, ' preview.png'); // ‚Üí template preview.png
      var infoName = templateName
        .replace(/\.[\w]+$/i, ' info.txt'); // ‚Üí template info.png

      var templateFile = new File(templatesPath + '/' + templateName); // ‚Üí template file object
      var previewImgFile = new File(templatesPath + '/' + imgName); // ‚Üí preview image object
      var infoFile = new File(templatesPath + '/' + infoName); // ‚Üí info file object

      var fWidth = wWidth; 
      var infoContent = ['...', '...']; // info placeholder text...
      
      if (infoFile.exists) {
        infoFile.open('r'); // ‚Üí open file
        infoFile.encoding = 'UTF-8'; // ‚Üí file encoding
        infoContent = infoFile
          .read()
          .toString()
          .split(/[\n|\r]+/); // text content as array ‚Üí ['line1', 'line2']
      }
      if (previewImgFile.exists) {
        vGrp2.visible = true; // ‚Üí show preview
        previewImg.image = previewImgFile; // ‚Üí set preview image file
      }
      w.size.width = oWidth; // ‚Üí resize window
      pathTxt.text = 'templates/'+ templateName; // ‚Üí 'templates/.../template name'
      updateTxt.text = 'updated on: ' + templateFile.created.toString(); // ‚Üí 'updated on: date and time'
      info1Txt.text = '>> ' + infoContent[0]; // ‚Üí '>> info line 1'
      info2Txt.text = '>> ' + infoContent[1]; // ‚Üí '>> info line 2'
    };
  
    w.onShow = function () {
      expandNodes(tree); // expand all tree folder nodes...
      oWidth = w.size.width; // window width with image preview...
      wWidth = oWidth - 490; // window width without image preview...
      vGrp2.visible = false; // ‚Üí hide preview
      w.size.width = wWidth; // ‚Üí resize window
    };
        
    importBtn.onClick = function () {
  
      var s = tree.selection; // ‚Üí current selection
      var fileName = s.toString();

      // iterate selection parent + parent + parent... to form selected template file path...
      while (s.parent.toString() != templatesFolder.displayName) {
        s = s.parent; // current parent...
        fileName = s.toString() + '/' + fileName; // ‚Üí current parent/.../template name
      }
      var templateFile = new File(templatesPath + '/' + fileName); // ‚Üí template file object

      var IO = new ImportOptions(templateFile); // import options...
      app.project.importFile(IO); // ‚Üí import template project
      w.close(); // ‚Üí close window
    };
  
    downloadBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no network...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }
      var url = repoURL + '/raw/main/templates.zip';

      var zipPath = downPath + '/templates.zip'; // ‚Üí ~AppData\Roaming\PROMO GNEWS script\temp\templates.zip

      if (!downFolder.exists) {
        // downloads folder does not exist...
        downFolder.create(); // ‚Üí create downloads folder
      }
      getURLContent([url], [downPath]); // ‚Üí downloads content
      unzipContent(zipPath, templatesPath); // ‚Üí unzip file
      buildTree(templatesFolder, tree, fileFilter); // ‚Üí update tree
      expandNodes(tree); // expand all tree folder nodes...
    };
  
    refreshBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no access...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }
      buildTree(templatesFolder, tree, fileFilter); // ‚Üí update tree
      expandNodes(tree); // expand all tree folder nodes...
    };
  
    openFldBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no access...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }
      if (!templatesFolder.exists) {
        // template folder does not exist...
        templatesFolder.create(); // ‚Üí create template folder
      }
      openFolder(templatesPath); // ‚Üí open template folder
    };
  
    w.show();
  }
  
  // organization tags UI...
  function tagDialog() {

    // ‚Üí [tag, icon]
    // comments just for comp itens...
    var compCommentTags = [
      ['export', 'ftgTogIcon'],
      ['edit', 'compTogIcon'],
      ['ignore', 'solTogIcon']
    ];
    // comments for footage itens or template names for comp itens...
    var multiTags = [
      ['bg', 'imgTogIcon'],
      ['photo', 'imgTogIcon'],
      ['logo', 'shpTogIcon'],
      ['icon', 'shpTogIcon'],
      ['texture', 'matteTogIcon'],
      ['pattern', 'matteTogIcon'],
      ['tile', 'matteTogIcon'],
      ['lettering', 'txtTogIcon'],
      ['music', 'sonoTogIcon'],
      ['loc', 'sonoTogIcon']
    ];
    // template names for comp itens...
    var compTemplateTags = [
      ['end page', 'compTogIcon'],
      ['opening', 'compTogIcon']
    ];

    var fldLoop = '';
//     var fldLoop = '\n\t\tif (app.project.selection[i] instanceof FolderItem) {\
// \t\t\tfor (var f = 1; f <= app.project.selection[i].numItens; f++) {\
// \t\t\t\talert(app.project.selection[i].item(f).name);\
// \t\t\t}\
// \t\t}\n';
    // Ui definition...
    // window...
    var tagWindow = 'var w = new Window(\'palette\', \'org. tags...\');\
mainGrp = w.add(\'group\');\
mainGrp.orientation = \'column\';\
mainGrp.spacing = 2;\
mainGrp.alignChildren = \'left\';\n\n';

    // comp comment buttons...
    for (var c = 0; c < compCommentTags.length; c++) {
      tagWindow += 'var compComTagGrp'+ c +' = mainGrp.add(\'group\');\
var compComTagBtn'+ c +' = compComTagGrp'+ c +'.add(\'iconbutton\', undefined, ' + compCommentTags[c][1] + ', {style: \'toolbutton\'});\
compComTagBtn'+ c +'.helpTip = \'' + compCommentTags[c][0] + ' comp comment tag\';\
var compComTag'+ c +'Txt = compComTagGrp'+ c +'.add(\'statictext\', undefined, \'' + compCommentTags[c][0] + '\');\
setTxtColor(compComTag'+ c +'Txt, GNEWS_SEC11);\n\n';
    }
    // template buttons...
    for (var b = 0; b < multiTags.length; b++) {
      tagWindow += 'var multiTagGrp'+ b +' = mainGrp.add(\'group\');\
var multiTagBtn'+ b +' = multiTagGrp'+ b +'.add(\'iconbutton\', undefined, ' + multiTags[b][1] + ', {style: \'toolbutton\'});\
multiTagBtn'+ b +'.helpTip = \'' + multiTags[b][0] + ' tag\';\
var multiTag'+ b +'Txt = multiTagGrp'+ b +'.add(\'statictext\', undefined, \'' + multiTags[b][0] + '\');\
setTxtColor(multiTag'+ b +'Txt, GNEWS_SEC10);\n\n';
    }
    // template buttons...
    for (var p = 0; p < compTemplateTags.length; p++) {
      tagWindow += 'var temTagGrp'+ p +' = mainGrp.add(\'group\');\
var temTagBtn'+ p +' = temTagGrp'+ p +'.add(\'iconbutton\', undefined, ' + compTemplateTags[p][1] + ', {style: \'toolbutton\'});\
temTagBtn'+ p +'.helpTip = \'' + compTemplateTags[p][0] + ' template tag\';\
var temTag'+ p +'Txt = temTagGrp'+ p +'.add(\'statictext\', undefined, \'' + compTemplateTags[p][0] + '\');\
setTxtColor(temTag'+ p +'Txt, GNEWS_SEC9);\n\n\n';
    }
    // click events...
    for (var t = 0; t < compCommentTags.length; t++) {
      tagWindow += 'compComTagBtn'+ t +'.onClick = function () {\
\tif (app.project.selection.length == 0) {return;}\
\tfor (var i = 0; i < app.project.selection.length; i++) {' + fldLoop + '\
\t\tif (!(app.project.selection[i] instanceof CompItem)) {continue;}\
\t\tapp.project.selection[i].comment = \'' + compCommentTags[t][0] + ': true\';\
\t}\n};\n';
    }

    for (var m = 0; m < multiTags.length; m++) {
      tagWindow += 'multiTagBtn'+ m +'.onClick = function () {\
\tif (app.project.selection.length == 0) {return;}\
\tfor (var i = 0; i < app.project.selection.length; i++) {' + fldLoop + '\
\t\tif (app.project.selection[i] instanceof CompItem) {\
\t\t\tapp.project.selection[i].motionGraphicsTemplateName = \'' + multiTags[m][0] + '\';\
\t\t}\
\t\tif (app.project.selection[i] instanceof FootageItem) {\
\t\t\tapp.project.selection[i].comment = \'' + multiTags[m][0] + ': true\';\
\t\t}\
\t}\n};\n';
    }

    for (var k = 0; k < compTemplateTags.length; k++) {
      tagWindow += 'temTagBtn'+ k +'.onClick = function () {\
\tif (app.project.selection.length == 0) {return;}\
\tfor (var i = 0; i < app.project.selection.length; i++) {' + fldLoop + '\
\t\tif (!(app.project.selection[i] instanceof CompItem)) {continue;}\
\t\tapp.project.selection[i].motionGraphicsTemplateName = \'' + compTemplateTags[k][0] + '\';\
\t}\n};\n';
    }

    tagWindow += 'w.show();';

    eval(tagWindow); // ‚Üí eval Ui definition
    // alert(tagWindow);
  }
  
  // install fonts UI...
  function fontsDialog() {
  
    var fontsPath = scriptPreferencesPath + '/fonts';
    var fontsFolder = new Folder(fontsPath);

    var downPath = scriptPreferencesPath + '/temp';
    var downFolder = new Folder(downPath);
  
    // UI definition...
    var w = new Window('dialog', 'font options...');
    // treeview...
    var tree = w.add('treeview', [0, 0, 250, 380]);
  
    // creates all the 'treeview nodes'...
    buildFontTree(fontsFolder, tree);
  
    // buttons group...
    var bGrp = w.add('group');
    bGrp.orientation = 'stack';
    bGrp.alignment = 'fill';
    // left buttons group...
    var bGrp1 = bGrp.add('group');
    bGrp1.alignment = 'left';
    bGrp1.spacing = '2';
    // right buttons group...
    var bGrp2 = bGrp.add('group');
    bGrp2.alignment = 'right';
    // left buttons...
    var downloadBtn = bGrp1.add('iconbutton', undefined, downloadIcon, {style: 'toolbutton'});
    downloadBtn.helpTip = 'downloads the latest templates';
    var refreshBtn = bGrp1.add('iconbutton', undefined, refreshIcon, {style: 'toolbutton'});//bGroup.add('button', undefined, 'refresh');
    refreshBtn.helpTip = 'refresh list content';
    var openFldBtn = bGrp1.add('iconbutton', undefined, folderIcon, {style: 'toolbutton'});//bGroup.add('button', undefined, 'refresh');
    openFldBtn.helpTip = 'open fonts folder';
    // right buttons...
    var installBtn = bGrp2.add('button', undefined, 'install');
    installBtn.helpTip = 'install selected fonts';
    installBtn.enabled = false; // ‚Üí disable install button
  
    tree.onChange = function () {
  
      // node folders should not be selectable...
      if (tree.selection != null && tree.selection.type == 'node') {
        tree.selection = null; // ‚Üí clear selection
      }
      installBtn.enabled = tree.selection != null; // ‚Üí enable | disable install button
    };
  
    // expands every node from the start...
    w.onShow = function () {
      expandNodes(tree);
    };
  
    // font installation...
    installBtn.onClick = function () {
  
      var fontFamilyName = tree.selection.toString();
      var fontFamilyPath = fontsPath + '/' + fontFamilyName;
      var fontFamilyFolder = new Folder(fontFamilyPath);
  
      // checks if there is a system folder correspondent to the selection...
      if (fontFamilyFolder.exists) {
        return;
      }
      // install the selected font family on Windows...
      if (appOs == 'Win') {
        installFonts(fontFamilyPath.toString());
      }
    };
  
    // download and merge/overwrite files on the preferences font folder...
    downloadBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no network...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }
      var url = repoURL + '/raw/main/fonts.zip';
      var zipPath = downPath + '/fonts.zip';
      
      if (!downFolder.exists) {
        downFolder.create();
      }
      getURLContent([url], [downPath]);
      unzipContent(zipPath, fontsPath);
      buildFontTree(fontsFolder, tree);
      expandNodes(tree);  
    };
  
    refreshBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no access...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }
      buildFontTree(fontsFolder, tree);
      expandNodes(tree);
    };

    openFldBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no access...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }      
      if (!fontsFolder.exists) {
        fontsFolder.create();
      }
      openFolder(fontsPath);
    };
    
    w.show();
  }
  