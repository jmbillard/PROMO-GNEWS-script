
/*

---------------------------------------------------------------
> ü™ü UI dialogs
---------------------------------------------------------------

*/

//  linter settings:
//  jshint -W061
//  jshint -W043

// import templates UI...
function templateDialog() {

    var templatesPath = scriptPreferencesPath + '/templates';
    var templatesFolder = new Folder(templatesPath);

    var wWidth;
    var oWidth;
    var previewScale = 0.25;
    var fileFilter = ['.aep', '.aet'];
    
    var w = new Window('dialog', 'import options...');
    var mainGrp = w.add('group');
    var vGrp1 =  mainGrp.add('group');
    vGrp1.orientation = 'column';
    var vGrp2 =  mainGrp.add('group');
    vGrp2.orientation = 'column';
    vGrp2.alignChildren = 'left';
    vGrp2.visible = false;
    var tree = vGrp1.add('treeview', [0, 0, 250, 340]);
    buildTree(templatesFolder, tree, fileFilter);
  
    var bGrp = vGrp1.add('group');
    bGrp.orientation = 'stack';
    bGrp.alignment = 'fill';
    var bGrp1 = bGrp.add('group');
    bGrp1.alignment = 'left';
    bGrp1.spacing = '2';
    var bGrp2 = bGrp.add('group');
    bGrp2.alignment = 'right';
    var downloadBtn = bGrp1.add('iconbutton', undefined, downloadIcon, {style: 'toolbutton'});
    downloadBtn.helpTip = 'downloads the latest templates';
    var refreshBtn = bGrp1.add('iconbutton', undefined, refreshIcon, {style: 'toolbutton'});//bGroup.add('button', undefined, 'refresh');
    refreshBtn.helpTip = 'refresh list content';
    var openFldBtn = bGrp1.add('iconbutton', undefined, folderIcon, {style: 'toolbutton'});//bGroup.add('button', undefined, 'refresh');
    openFldBtn.helpTip = 'open template folder';
    var importBtn = bGrp2.add('button', undefined, 'import');
    importBtn.helpTip = 'import selected template';
    importBtn.enabled = tree.selection != null;
  
    var pathTxt = vGrp2.add ('statictext', undefined, '...');
    pathTxt.characters = 40;
    setTxtColor(pathTxt, GNEWS_GRA3);
    var previewImg = vGrp2.add ('image', undefined, undefined);
    previewImg.size = [1920 * previewScale, 1080 * previewScale];
    var updateTxt = vGrp2.add('statictext', undefined, '...');
    updateTxt.characters = 40;
    setTxtColor(updateTxt, GNEWS_SEC11);
    var infoGrp = vGrp2.add('group');
    infoGrp.orientation = 'column';
    infoGrp.spacing = 3;
    var info1Txt = infoGrp.add('statictext', undefined, '...');
    info1Txt.characters = 40;
    setTxtColor(info1Txt, GNEWS_SEC9);
    var info2Txt = infoGrp.add('statictext', undefined, '...');
    info2Txt.characters = 40;
    setTxtColor(info2Txt, GNEWS_SEC9);
  
    tree.onChange = function () {
      
      // node folders should not be selectable...
      if (tree.selection != null && tree.selection.type == 'node') {
        tree.selection = null;
        vGrp2.visible = false;
      }
      if (tree.selection == null) {
        w.size.width = wWidth;
        vGrp2.visible = false;
      } else {
        
        var s = tree.selection;
        var templateName = s.toString();
        var imgName = s.toString().replace(/\.[\w]+$/i, ' preview.png');
        var infoName = s.toString().replace(/\.[\w]+$/i, ' info.txt');
        
        while (s.parent.toString() != templatesFolder.displayName) {
          
          s = s.parent;
          templateName = s.toString() + '/' + templateName;
          imgName = s.toString() + '/' + imgName;
          infoName = s.toString() + '/' + infoName;
        }
        var templateFile = new File(templatesPath + '/' + templateName);
        var previewImgFile = new File(templatesPath + '/' + imgName);
        var infoFile = new File(templatesPath + '/' + infoName);
        var fWidth = wWidth;
        var infoContent = ['...', '...'];
        
        if (infoFile.exists) {
          infoFile.open('r');
          infoFile.encoding = 'UTF-8';
          infoContent = infoFile.read().toString().split(/\n|\r/);
        }
        if (previewImgFile.exists) {
          fWidth = oWidth;
          vGrp2.visible = true;
          previewImg.image = previewImgFile;
        }
        w.size.width = fWidth;
        pathTxt.text = 'templates/'+ templateName;
        updateTxt.text = 'updated on: ' + templateFile.created.toString();
        info1Txt.text = '>> ' + infoContent[0];
        info2Txt.text = '>> ' + infoContent[1];
      }
      importBtn.enabled = tree.selection != null;
    };
  
    w.onShow = function () {
      expandNodes(tree);
      oWidth = w.size.width;
      vGrp2.visible = false;
      wWidth = oWidth - 490;
      w.size.width = wWidth;
    };
        
    importBtn.onClick = function () {
  
      var fileName = tree.selection.toString();
      var s = tree.selection;
  
      // adds the parent nodes to the file name...
      while (s.parent.toString() != templatesFolder.displayName) {
        
        s = s.parent;
        fileName = s.toString() + '/' + fileName;
      }
      var templateFile = new File(templatesPath + '/' + fileName);
      // import options...
      var IO = new ImportOptions(templateFile);
      app.project.importFile(IO);
      w.close();
    };
  
    downloadBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no network...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }
      var url = repoURL + '/raw/main/templates.zip';

      var downPath = scriptPreferencesPath + '/temp';
      var downFolder = new Folder(downPath);
      var zipPath = downPath + '/templates.zip';
      var templatesPath = scriptPreferencesPath + '/templates';

      if (!downFolder.exists) {
        downFolder.create();
      }
      getURLContent([url], [downPath]);
      unzipContent(zipPath, templatesPath);
      buildTree(templatesFolder, tree, fileFilter);
      expandNodes(tree);  
    };
  
    refreshBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no access...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }
      buildTree(templatesFolder, tree, fileFilter);
      expandNodes(tree);
    };
  
    openFldBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no access...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }      
      if (!templatesFolder.exists) {
        templatesFolder.create();
      }
      openFolder(templatesPath);
    };
  
    w.show();
  }
  
  // organization tags UI...
  function tagDialog() {

    var compCommentTags = [
      'export',
      'edit',
      'ignore'
    ];
    var multiTags = [
      'foto',
      'logo',
      'pattern',
      'tile',
      'texture'
    ];
    var compTemplateTags = [
      'end page'
    ];

    // window...
    var tagWindow = 'var w = new Window(\'palette\', \'org. tags...\');\
w.alignChildren = \'left\'\n';

    // comp comment buttons...
    for (var c = 0; c < compCommentTags.length; c++) {
      tagWindow += 'var compComTagGrp'+ c +' = w.add(\'group\');\
var compComTagBtn'+ c +' = compComTagGrp'+ c +'.add(\'iconbutton\', undefined, solTogIcon, {style: \'toolbutton\'});\
compComTagBtn'+ c +'.helpTip = \'' + compCommentTags[c] + ' comp comment tag\';\
var compComTag'+ c +'Txt = compComTagGrp'+ c +'.add(\'statictext\', undefined, \'' + compCommentTags[c] + '\');\
setTxtColor(compComTag'+ c +'Txt, GNEWS_SEC11);\n';
    }
    // template buttons...
    for (var b = 0; b < multiTags.length; b++) {
      tagWindow += 'var multiTagGrp'+ b +' = w.add(\'group\');\
var multiTagBtn'+ b +' = multiTagGrp'+ b +'.add(\'iconbutton\', undefined, solTogIcon, {style: \'toolbutton\'});\
multiTagBtn'+ b +'.helpTip = \'' + multiTags[b] + ' tag\';\
var multiTag'+ b +'Txt = multiTagGrp'+ b +'.add(\'statictext\', undefined, \'' + multiTags[b] + '\');\
setTxtColor(multiTag'+ b +'Txt, GNEWS_SEC10);\n';
    }
    // template buttons...
    for (var p = 0; p < compTemplateTags.length; p++) {
      tagWindow += 'var temTagGrp'+ p +' = w.add(\'group\');\
var temTagBtn'+ p +' = temTagGrp'+ p +'.add(\'iconbutton\', undefined, solTogIcon, {style: \'toolbutton\'});\
temTagBtn'+ p +'.helpTip = \'' + compTemplateTags[p] + ' template tag\';\
var temTag'+ p +'Txt = temTagGrp'+ p +'.add(\'statictext\', undefined, \'' + compTemplateTags[p] + '\');\
setTxtColor(temTag'+ p +'Txt, GNEWS_SEC9);\n';
    }
    // click events...
    for (var t = 0; t < compCommentTags.length; t++) {
      tagWindow += 'compComTagBtn'+ t +'.onClick = function () {\
  if (app.project.selection.length == 0) {return;}\
  for (var i = 0; i < app.project.selection.length; i++) {\
    if (!(app.project.selection[i] instanceof CompItem)) {continue;}\
    app.project.selection[i].comment = \'' + compCommentTags[t] + ': true\';\
  }\n};\n';
    }

    for (var m = 0; m < multiTags.length; m++) {
      tagWindow += 'multiTagBtn'+ m +'.onClick = function () {\
  if (app.project.selection.length == 0) {return;}\
  for (var i = 0; i < app.project.selection.length; i++) {\
    if (app.project.selection[i] instanceof CompItem) {\
      app.project.selection[i].motionGraphicsTemplateName = \'' + multiTags[m] + '\';\
    }\
    if (app.project.selection[i] instanceof FootageItem) {\
      app.project.selection[i].comment = \'' + multiTags[m] + ': true\';\
    }\
  }\n};\n';
    }

    for (var k = 0; k < compTemplateTags.length; k++) {
      tagWindow += 'temTagBtn'+ k +'.onClick = function () {\
  if (app.project.selection.length == 0) {return;}\
  for (var i = 0; i < app.project.selection.length; i++) {\
    if (!(app.project.selection[i] instanceof CompItem)) {continue;}\
    app.project.selection[i].motionGraphicsTemplateName = \'' + compTemplateTags[k] + '\';\
  }\n};\n';
    }

    tagWindow += 'w.show();';

    eval(tagWindow);
  }
  
  // install fonts UI...
  function fontsDialog() {
  
    var fontsPath = scriptPreferencesPath + '/fonts';
    var fontsFolder = new Folder(fontsPath);

    var downPath = scriptPreferencesPath + '/temp';
    var downFolder = new Folder(downPath);
  
    // UI definition...
    var w = new Window('dialog', 'font options...');
    // treeview...
    var tree = w.add('treeview', [0, 0, 250, 380]);
  
    // creates all the 'treeview nodes'...
    buildFontTree(fontsFolder, tree);
  
    // buttons...
    var bGrp = w.add('group');
    bGrp.orientation = 'stack';
    bGrp.alignment = 'fill';
    var bGrp1 = bGrp.add('group');
    bGrp1.alignment = 'left';
    bGrp1.spacing = '2';
    var bGrp2 = bGrp.add('group');
    bGrp2.alignment = 'right';
    var downloadBtn = bGrp1.add('iconbutton', undefined, downloadIcon, {style: 'toolbutton'});
    downloadBtn.helpTip = 'downloads the latest templates';
    var refreshBtn = bGrp1.add('iconbutton', undefined, refreshIcon, {style: 'toolbutton'});//bGroup.add('button', undefined, 'refresh');
    refreshBtn.helpTip = 'refresh list content';
    var openFldBtn = bGrp1.add('iconbutton', undefined, folderIcon, {style: 'toolbutton'});//bGroup.add('button', undefined, 'refresh');
    openFldBtn.helpTip = 'open fonts folder';
    var installBtn = bGrp2.add('button', undefined, 'install');
    installBtn.helpTip = 'install selected fonts';
    installBtn.enabled = tree.selection != null;
  
    tree.onChange = function () {
  
      // node folders should not be selectable...
      if (tree.selection != null && tree.selection.type == 'node') {
        tree.selection = null;
      }
      // toggle the enabled state depending on the selection...
      installBtn.enabled = tree.selection != null;
    };
  
    // expands every node from the start...
    w.onShow = function () {
      expandNodes(tree);
    };
  
    // font installation...
    installBtn.onClick = function () {
  
      var fontFamilyName = tree.selection.toString();
      var fontFamilyPath = fontsPath + '/' + fontFamilyName;
      var fontFamilyFolder = new Folder(fontFamilyPath);
  
      // checks if there is a system folder correspondent to the selection...
      if (fontFamilyFolder.exists) {
        // install the selected font family on Windows...
        if (appOs == 'Win') {
          installFonts(fontFamilyPath.toString());
        }
      }
    };
  
    // download and merge/overwrite files on the preferences font folder...
    downloadBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no network...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }
      var url = repoURL + '/raw/main/fonts.zip';
      var zipPath = downPath + '/fonts.zip';
      
      if (!downFolder.exists) {
        downFolder.create();
      }
      getURLContent([url], [downPath]);
      unzipContent(zipPath, fontsPath);
      buildFontTree(fontsFolder, tree);
      expandNodes(tree);  
    };
  
    refreshBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no access...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }
      buildFontTree(fontsFolder, tree);
      expandNodes(tree);
    };

    openFldBtn.onClick = function () {
      // alert...
      if (!netAccess()) {
        alert('no access...  Œ£(„Å£ ¬∞–î ¬∞;)„Å£');
        return;
      }      
      if (!fontsFolder.exists) {
        fontsFolder.create();
      }
      openFolder(fontsPath);
    };
    
    w.show();
  }
  