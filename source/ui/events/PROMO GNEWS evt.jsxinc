/*

---------------------------------------------------------------
> 📟 main menu events
---------------------------------------------------------------

*/

//  linter settings:
//  jshint -W061
//  jscs:disable maximumLineLength

ctrlBtn.onClick = function () {
  currentGrp.visible = false;
  currentGrp = ctrlGrp;
  openTab();
};

animBtn.onClick = function () {
  currentGrp.visible = false;
  currentGrp = animationGrp;
  openTab();
};

fxBtn.onClick = function () {
  currentGrp.visible = false;
  currentGrp = fxGrp;
  openTab();
};

txtBtn.onClick = function () {
  currentGrp.visible = false;
  currentGrp = textGrp;
  openTab();
};

guideBtn.onClick = function () {
  currentGrp.visible = false;
  currentGrp = guideGrp;
  openTab();
};

toolBtn.onClick = function () {
  currentGrp.visible = false;
  currentGrp = toolsGrp;
  openTab();
};

projBtn.onClick = function () {
  projName = getXMPdata('title[1]');
  projName = projName == '' ? 'proj name' : projName;
  projId = getXMPdata('identifier');
  projId = projId == '' ? 'proj id' : projId;

  currentGrp.visible = false;
  currentGrp = projectGrp;

  openTab();
  projUserTxt.text = userPrefix;
  projIdTxt.text = projId;
  projNameTxt.text = projName;
};

appBtn.onClick = function () {
  currentGrp.visible = false;
  currentGrp = appGrp;
  openTab();
};

devBtn.onClick = function () {
  currentGrp.visible = false;
  currentGrp = devGrp;
  openTab();
};

linksBtn.onClick = function () {
  currentGrp.visible = false;
  currentGrp = linksGrp;
  openTab();
};

findBtn.onClick = function() {
  findDialog();
};

prefBtn.onClick = function () {
  currentGrp.visible = false;
  currentGrp = preferencesGrp;
  openTab();
};

/*

---------------------------------------------------------------
> 🕹️ ctrl tab events
---------------------------------------------------------------

*/

upHBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  var upArray = [];
  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  app.beginUndoGroup('select parent');

  if (selLayers.length > 0) {
    for (i = 0; i < selLayers.length; i++) {
      if (selLayers[i].parent != null) {
        upArray.push(selLayers[i].parent);
      }
    }
    if (upArray.length > 0) {
      for (i = 0; i < selLayers.length; i++) {
        selLayers[i].selected = false;
      }
      for (i = 0; i < upArray.length; i++) {
        if (upArray[i].shy && aItem.hideShyLayers) {
          upArray[i].shy = false;
        }
        upArray[i].selected = true;
      }
    }
  } else {
    try {
      aItem.layer('ctrl_comp').selected = true;
    } catch (error) {}
  }
  app.endUndoGroup();
};

dwnHBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  var dwnArray = [];
  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  app.beginUndoGroup('select children');

  if (selLayers.length > 0) {
    for (i = 0; i < selLayers.length; i++) {
      for (l = 1; l <= aItem.numLayers; l++) {
        var lParent = aItem.layer(l).parent;

        if (lParent == selLayers[i]) {
          dwnArray.push(aItem.layer(l));
        }
      }
    }
    if (dwnArray.length > 0) {
      for (i = 0; i < selLayers.length; i++) {
        selLayers[i].selected = false;
      }
      for (i = 0; i < dwnArray.length; i++) {
        if (dwnArray[i].shy && aItem.hideShyLayers) {
          dwnArray[i].shy = false;
        }
        dwnArray[i].selected = true;
      }
    }
  } else {
    try {
      aItem.layer('ctrl_comp').selected = true;
    } catch (error) {}
  }
  app.endUndoGroup();
};

nullShpBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  var ctrlLayer;
  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  app.beginUndoGroup('create null');

  if (selLayers.length > 0) {
    for (var l = 0; l < selLayers.length; l++) {
      var selLayer = selLayers[l];

      if (lDrop.selection == 0) {
        ctrlLayer = shpNull();
      } else {
        ctrlLayer = aItem.layers.addNull();
      }
      if (selLayer.hasTrackMatte) {
        ctrlLayer.moveBefore(aItem.layer(selLayer.index - 1));
      } else {
        ctrlLayer.moveBefore(selLayer);
      }
      var prefixArray = getPrefixes();
      var selName = selLayer.name;

      for (var p = 0; p < prefixArray.length; p++) {
        selName = deletePrefix(selName, prefixArray[p]);
      }
      ctrlLayer.guideLayer = true;
      ctrlLayer.name = nullPrefix + selName.replaceSpecialCharacters();

      if (ctrlLayer.name == selLayer.name) {
        var ctrlName = ctrlLayer.name;
        ctrlLayer.name = nameInc(ctrlName);
      }
      setHierarchy(selLayer, ctrlLayer);
      ctrlLayer.inPoint = selLayer.inPoint;
      ctrlLayer.outPoint = selLayer.outPoint;

      if (aniTogBtn.value) {
        cloneKeys(selLayer, ctrlLayer);
      }
      if (exprTogBtn.value) {
        cloneExpressions(selLayer, ctrlLayer);
      }
      ctrlLayer.label = 1;
    }
  } else {
    if (lDrop.selection == 0) {
      ctrlLayer = shpNull();
    } else {
      ctrlLayer = aItem.layers.addNull();
    }
    ctrlLayer.guideLayer = true;
    ctrlLayer.name = nullPrefix;
    ctrlLayer.label = 1;
  }
  app.endUndoGroup();
};

nullCShpBtn.onClick = function () {
  var posProp = 'ADBE Position';
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length < 2) {
    showTabErr('select more than one layer');
    return;
  }
  var lIndex = aItem != null ? aItem.numLayers : 0;
  var ctrlLayer;

  for (i = 0; i < selLayers.length; i++) {
    selLayers[i].parent = null;

    if (selLayers[i].index < lIndex) {
      lIndex = i;
    }
  }
  app.beginUndoGroup('create centered null');

  if (lDrop.selection == 0) {
    ctrlLayer = shpNull();
  } else {
    ctrlLayer = aItem.layers.addNull();
  }
  var ctrlPos = ctrlLayer.property(trmProp).property(posProp);

  ctrlLayer.guideLayer = true;
  ctrlLayer.name = nullPrefix + 'center';
  ctrlPos.setValue(findCenter(selLayers));
  ctrlLayer.moveBefore(selLayers[lIndex]);

  for (i = 0; i < selLayers.length; i++) {
    selLayers[i].parent = ctrlLayer;
  }
  ctrlLayer.label = 1;

  app.endUndoGroup();
};

/*

---------------------------------------------------------------
> 🔥 fx tab events
---------------------------------------------------------------

*/

shpAdjBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayer = aItem != null ? aItem.selectedLayers[0] : null;
  var adjLayer;

  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  app.beginUndoGroup('create adj layer');

  var adjC = rgb(255, 255, 255);
  var adjW = aItem.width;
  var adjH = aItem.height;

  if (lDrop.selection == 0) {
    adjLayer = shpAdjustment();
  } else {
    adjLayer = aItem.layers.addSolid(adjC, '', adjW, adjH, 1.0);
  }
  if (selLayer != null) {
    adjLayer.moveBefore(selLayer);
    adjLayer.inPoint = selLayer.inPoint;
    adjLayer.outPoint = selLayer.outPoint;
  }
  adjLayer.name = adjPrefix;
  adjLayer.adjustmentLayer = true;
  adjLayer.label = 5;

  if (adjLayer instanceof AVLayer) {
    var expStr = scaleToCompSize();
    adjLayer.property(trmProp).property('ADBE Scale').expression = expStr;
  }
  app.endUndoGroup();
};

curBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('layer not selected');
    return;
  }
  var fxName = 'ADBE CurvesCustom';

  app.beginUndoGroup('curves');

  for (i = 0; i < selLayers.length; i++) {
    var effect = selLayers[i].property('ADBE Effect Parade').addProperty(fxName);
  }
  app.endUndoGroup();
};

levBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('layer not selected');
    return;
  }
  var fxName = 'ADBE Pro Levels2';

  app.beginUndoGroup('levels');

  for (i = 0; i < selLayers.length; i++) {
    var effect = selLayers[i].property('ADBE Effect Parade').addProperty(fxName);
  }
  app.endUndoGroup();
};

lumBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('layer not selected');
    return;
  }
  var fxName = 'ADBE Lumetri';

  app.beginUndoGroup('lumetri color');

  for (i = 0; i < selLayers.length; i++) {
    var effect = selLayers[i].property('ADBE Effect Parade').addProperty(fxName);
  }
  app.endUndoGroup();
};

gaublurBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('layer not selected');
    return;
  }
  var fxName = 'ADBE Gaussian Blur 2';

  app.beginUndoGroup('gaussian blur');

  for (i = 0; i < selLayers.length; i++) {
    var effect = selLayers[i].property('ADBE Effect Parade').addProperty(fxName);
  }
  app.endUndoGroup();
};

comblurBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('layer not selected');
    return;
  }
  var fxName = 'ADBE Compound Blur';

  app.beginUndoGroup('compound blur');

  for (i = 0; i < selLayers.length; i++) {
    var effect = selLayers[i].property('ADBE Effect Parade').addProperty(fxName);
  }
  app.endUndoGroup();
};

lensblurBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('layer not selected');
    return;
  }
  var fxName = 'ADBE Camera Lens Blur';

  app.beginUndoGroup('lens blur');

  for (i = 0; i < selLayers.length; i++) {
    var effect = selLayers[i].property('ADBE Effect Parade').addProperty(fxName);
  }
  app.endUndoGroup();
};

fillBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('layer not selected');
    return;
  }
  var fxName = 'ADBE Fill';

  app.beginUndoGroup('fill');

  for (i = 0; i < selLayers.length; i++) {
    var effect = selLayers[i].property('ADBE Effect Parade').addProperty(fxName);
    effect.property(3).setValue(randomColor()); // color
  }
  app.endUndoGroup();
};

fracBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('layer not selected');
    return;
  }
  var fxName = 'ADBE Fractal Noise';

  app.beginUndoGroup('fractal noise');

  for (i = 0; i < selLayers.length; i++) {
    var effect = selLayers[i].property('ADBE Effect Parade').addProperty(fxName);
  }
  app.endUndoGroup();
};

grainBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('layer not selected');
    return;
  }
  var fxName = 'VISINF Grain Implant';

  app.beginUndoGroup('add grain');

  for (i = 0; i < selLayers.length; i++) {
    var effect = selLayers[i].property('ADBE Effect Parade').addProperty(fxName);
  }
  app.endUndoGroup();
};

glassBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('layer not selected');
    return;
  }
  var fxName = 'ADBE 3D Glasses2';

  app.beginUndoGroup('3d glasses');

  for (i = 0; i < selLayers.length; i++) {
    var effect = selLayers[i].property('ADBE Effect Parade').addProperty(fxName);
    effect.property(1).setValue(selLayers[i].index); // left view
    effect.property(2).setValue(selLayers[i].index); // right view
    effect.property(7).setValue(12); // 3d view
  }
  app.endUndoGroup();
};

/*

---------------------------------------------------------------
> 🚶 animation tab events
---------------------------------------------------------------

*/

copyInfBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayer = aItem != null ? aItem.selectedLayers[0] : null;
  var aProp = selLayer != null ? selLayer.selectedProperties[0] : null;
  // error...
  if (aProp.selectedKeys.length != 1) {
    showTabErr('select 1 keyframe');
    return;
  }
  var k = aProp.selectedKeys[0];
  var kIn = aProp.keyInTemporalEase(k)[0];
  var kOut = aProp.keyOutTemporalEase(k)[0];
  // keyframe data formatted as tooltip...
  var kHelp = selLayer.name + ' ' + aProp.name + ' key ' + k + ':\n\n';
  kHelp += '<< in\nspeed: ' + kIn.speed.toFixed(1) + '\ninfluence: ' + kIn.influence.toFixed(1);
  kHelp += '\n\n>> out\nspeed: ' + kOut.speed.toFixed(1) + '\ninfluence: ' + kOut.influence.toFixed(1);

  keyData.value = true;
  keyData.inType = aProp.keyInInterpolationType(k);
  keyData.outType = aProp.keyOutInterpolationType(k);
  keyData.inEase = aProp.keyInTemporalEase(k);
  keyData.outEase = aProp.keyOutTemporalEase(k);
  // keyframe images...
  keyStats0Img.visible = false;
  keyStats1Img.visible = false;
  keyStats2Img.visible = false;
  keyStats3Img.visible = false;
  keyStats4Img.visible = false;
  keyStats5Img.visible = false;
  keyStats6Img.visible = false;
  keyStats7Img.visible = false;
  keyStats8Img.visible = false;
  keyStats9Img.visible = false;

  // 6614 - hold
  // 6613 - ease
  // 6612 - linear
  // shows the keyframe image based on the in|out interpolation type....
  switch (true) {
    // ease - linear
    case keyData.inType == 6613 && keyData.outType == 6612:
      keyStats1Img.visible = true;
      keyStats1Img.helpTip = kHelp;
      break;

    // linear - ease
    case keyData.inType == 6612 && keyData.outType == 6613:
      keyStats2Img.visible = true;
      keyStats2Img.helpTip = kHelp;
      break;

    // ease - ease
    case keyData.inType == 6613 && keyData.outType == 6613:
      keyStats3Img.visible = true;
      keyStats3Img.helpTip = kHelp;
      break;

    // hold - linear
    case keyData.inType == 6614 && keyData.outType == 6612:
      keyStats6Img.visible = true;
      keyStats6Img.helpTip = kHelp;
      break;

    // hold - ease
    case keyData.inType == 6614 && keyData.outType == 6613:
      keyStats9Img.visible = true;
      keyStats9Img.helpTip = kHelp;
      break;

    // linear - hold
    case keyData.inType == 6612 && keyData.outType == 6614:
      keyStats7Img.visible = true;
      keyStats7Img.helpTip = kHelp;
      break;

    // ease - hold
    case keyData.inType == 6613 && keyData.outType == 6614:
      keyStats8Img.visible = true;
      keyStats8Img.helpTip = kHelp;
      break;

    // hold - hold
    case keyData.inType == 6614 && keyData.outType == 6614:
      keyStats5Img.visible = true;
      keyStats5Img.helpTip = kHelp;
      break;

    // linear - linear
    default:
      keyStats4Img.visible = true;
      keyStats4Img.helpTip = kHelp;
      break;
  }
};

pasteInfBtn.onClick = function () {
  // error...
  if (!keyData.value) {
    showTabErr('no keyframe data');
    return;
  }
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : null;

  if (keyData.value) {
    for (var l = 0; l < selLayers.length; l++) {
      var aLayer = selLayers[l];
      var selProps = aLayer.selectedProperties;

      for (var p = 0; p < selProps.length; p++) {
        var aProp = selProps[p];
        var selKeys = aProp.selectedKeys;

        for (var k = 0; k < selKeys.length; k++) {
          try {
            var aKey = selKeys[k];
            aProp.setTemporalEaseAtKey(aKey, keyData.inEase, keyData.outEase);
            aProp.setInterpolationTypeAtKey(aKey, keyData.inType, keyData.outType);
          } catch (error) {}
        }
      }
    }
  }
};

/*

  ---------------------------------------------------------------
  > color, guides and branding events
  ---------------------------------------------------------------

  */

shpPalletBtn.onClick = function () {
  var aItem = app.project.activeItem;
  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  app.beginUndoGroup('pallet');

  var palletLayer = colorPallet();

  palletLayer.name = 'pallet - GNEWS';
  palletLayer.guideLayer = true;
  palletLayer.locked = true;
  palletLayer.property('ADBE Transform Group').position.setValue([0, 0]);
  palletLayer.property('ADBE Transform Group').position.expression('[0,0]');

  app.endUndoGroup();
};

arrowOnAirBtn.onClick = function () {
  var aItem = app.project.activeItem;
  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  app.beginUndoGroup('logo GNEWS');

  shp_arrow();

  app.endUndoGroup();
};

logoStaticBtn.onClick = function () {
  var aItem = app.project.activeItem;
  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  app.beginUndoGroup('logo GNEWS');

  shpMarcaGnewsStatic();

  app.endUndoGroup();
};

logoAnim3sBtn.onClick = function () {
  var aItem = app.project.activeItem;

  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  app.beginUndoGroup('logo GNEWS 3s');

  var layer = app.project.activeItem.layers.addShape();
  layer.startTime = aItem.time;
  layer.name = 'marca_gnews 3s';
  
  addPseudoEffect('marca_3s',toolMarca3s);
  app.endUndoGroup();
};

/*

---------------------------------------------------------------
> text tab events
---------------------------------------------------------------

*/

txtUpperBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('no text layer is selected');
    return;
  }
  app.beginUndoGroup('text to upper case');

  for (i = 0; i < selLayers.length; i++) {
    setTxtCase(selLayers[i], 0);
  }
  app.endUndoGroup();
};

txtLowerBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('no text layer is selected');
    return;
  }
  app.beginUndoGroup('text to lower case');

  for (i = 0; i < selLayers.length; i++) {
    setTxtCase(selLayers[i], 1);
  }
  app.endUndoGroup();
};

txtTitleBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('no text layer is selected');
    return;
  }
  app.beginUndoGroup('text to title case');

  for (i = 0; i < selLayers.length; i++) {
    setTxtCase(selLayers[i], 2);
  }
  app.endUndoGroup();
};

txtCleanerBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('no text layer is selected');
    return;
  }
  app.beginUndoGroup('text to title case');

  for (i = 0; i < selLayers.length; i++) {
    cleanText(selLayers[i]);
  }
  app.endUndoGroup();
};

txtColumnBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('no text layer is selected');
    return;
  }
  app.beginUndoGroup('break text columns');

  for (i = 0; i < selLayers.length; i++) {
    var selLayer = selLayers[i];
    var colN = 2;
    var colPos = selLayer.position.value;
    var col = columnText(selLayer, colN);

    if (col.length >= colN) {
      selLayer.enabled = false;
      col[0].position.setValue(colPos);

      for (c = 1; c < col.length; c++) {
        var exp = '[parent.sourceRectAtTime().width + 100, 0];';

        col[c].parent = col[c - 1];
        col[c].position.expression = exp;
        var cPos = col[c].position.value;
        col[c].position.expression = '';
        col[c].position.setValue(cPos);
        col[c].parent = null;
      }
    }
  }
  app.endUndoGroup();
};

limitSld.onChanging = function () {
  limitTxt.text = parseInt(limitSld.value);
  limitTxt2.text = parseInt(limitSld.value);
};

limitTxt2.onChanging = function () {
  limitTxt.text = parseInt(limitTxt2.text);
  limitSld.value = parseInt(limitTxt2.text);
};

limitSld.onChange = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];

  if (aItem != null) {
    app.beginUndoGroup('break text');

    for (i = 0; i < selLayers.length; i++) {
      lineBreak(selLayers[i], Number(limitTxt.text));
    }
    app.endUndoGroup();
  }
};

limitTxt2.onChange = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];

  if (aItem != null) {
    app.beginUndoGroup('break text');

    for (i = 0; i < selLayers.length; i++) {
      lineBreak(selLayers[i], Number(limitTxt.text));
    }
    app.endUndoGroup();
  }
};

/*

  ---------------------------------------------------------------
  > 🧻 layer tab events
  ---------------------------------------------------------------

  
  renameLayersBtn.onClick = function () {
    var iArray = getComps();
    var assArray = iArray[0];
    var aItem = app.project.activeItem;
    var compArray = [aItem];
    // error...
    if (!(aItem instanceof CompItem)) {
      showTabErr('comp not selected');
      return;
    }
    for (i = 0; i < assArray.length; i++) {
      if (assArray[i] == aItem) {
        compArray = [];
      }
    }
    app.beginUndoGroup('update names');
    
    renameLayers(compArray);
    
    app.endUndoGroup();
};

isolateBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  
  if (aItem instanceof CompItem && selLayers.length > 0) {
    app.beginUndoGroup('isolate layers');
    
    for (i = 1; i <= aItem.numLayers; i++) {
      var l = aItem.layer(i);
      
      l.shy = true;
    }
    
    for (i = 0; i < selLayers.length; i++) {
      var sl = selLayers[i];
      
      sl.shy = false;
    }
    aItem.hideShyLayers = !aItem.hideShyLayers;
    
    app.endUndoGroup();
  }
};

*/

lockTrmBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('layer not selected');
    return;
  }
  app.beginUndoGroup('lock transform properties');

  for (i = 0; i < selLayers.length; i++) {
    lockTrmProp(selLayers[i]);
  }
  app.endUndoGroup();
};

// randomize layer start times
layerRandBtn.onClick = function () {
  var aItem = app.project.activeItem;
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('layer not selected');
    return;
  }
  var limit = 30;

  app.beginUndoGroup('randomize layer times');

  var fDur = aItem.frameDuration;
  var sTimeMin = selLayers[0].startTime;
  var sTimeMax = selLayers[0].startTime;

  // gets the min and max layer start times...
  for (i = 1; i < selLayers.length; i++) {
    selTime = selLayers[i].startTime;
    sTimeMin = sTimeMin < selTime ? sTimeMin : selTime;
    sTimeMax = sTimeMax > selTime ? sTimeMax : selTime;
  }

  // number of frames between the last and first layer start times...
  limit = sTimeMax != sTimeMin ? (sTimeMax - sTimeMin) / fDur : limit;

  for (i = 0; i < selLayers.length; i++) {
    // generates a random number of frames between 0 and limit...
    var nRandFrames = Math.round(gaussRnd(3) * limit) * fDur;

    if (sTimeMax != sTimeMin) {
      // sets each layer start time as the min + random number of frames...
      selLayers[i].startTime = sTimeMin + nRandFrames;
    } else {
      var halfLimit = (limit / 2) * fDur;
      selLayers[i].startTime = sTimeMin - halfLimit + nRandFrames;
    }
  }
  app.endUndoGroup();
};

/*

---------------------------------------------------------------
> 🔨 tools tab events
---------------------------------------------------------------

*/

arrowBtn.onClick = function () {
  var aItem = app.project.activeItem;

  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  app.beginUndoGroup('arrow rig');

  var expFx = arrow();

  var bodyShape = new Shape();
  bodyShape.vertices = [
    [0, 0],
    [80, 0],
    [80, -250],
    [160, -250],
  ];
  bodyShape.inTangents = [
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
  ];
  bodyShape.outTangents = [
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
  ];
  bodyShape.closed = false;

  var headShape = new Shape();
  headShape.vertices = [
    [-10, -10],
    [0, 0],
    [-10, 10],
  ];
  headShape.inTangents = [
    [0, 0],
    [0, 0],
    [0, 0],
  ];
  headShape.outTangents = [
    [0, 0],
    [0, 0],
    [0, 0],
  ];
  headShape.closed = false;

  var shpLayer = shpArrow(bodyShape, headShape);
  addPseudoEffect('arrow', expFx);
  shpLayer.name = 'arrow';
  app.endUndoGroup();
};

counterBtn.onClick = function () {
  var aItem = app.project.activeItem;
  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  var valArray = [];
  
  app.beginUndoGroup('counter');

  if (selLayers.length == 0) {
    var cLayer = aItem.layers.addText();
    // text document...
    var text1 = cLayer.property('ADBE Text Properties');
    var textDoc1 = text1.property('ADBE Text Document');
    var textDocVal1 = textDoc1.value;
    textDocVal1.justification = ParagraphJustification.LEFT_JUSTIFY;
    textDocVal1.text = '0';
    // text content...
    textDoc1.setValue(textDocVal1);
    selLayers.push(cLayer);
  }

  for (var l = 0; l < selLayers.length; l++) {
    // layer...
    var aLayer = selLayers[l];

    if (!(aLayer instanceof TextLayer)) continue;
    // text document...
    var text = aLayer.property('ADBE Text Properties');
    var textDoc = text.property('ADBE Text Document');
    var textDocVal = textDoc.value;

    valArray.push(textDocVal);
  }
  // the pseudo effect is applied to all selected layers at once (ADOBEs limitation);
  addPseudoEffect('counter',toolCounter);

  // textArray index... the textArray length may not match selLayers length... 
  var t = 0;
  for (var n = 0; n < selLayers.length; n++) {
    // layer...
    var nLayer = selLayers[n];

    if (!(nLayer instanceof TextLayer)) continue;
    // text document...
    var text2 = nLayer.property('ADBE Text Properties');
    var textDoc2 = text2.property('ADBE Text Document');
    var textDocVal2 = textDoc2.value;

    textDoc2.setValue(valArray[t]);

    selLayers[n].name = txtPrefix + 'counter ' + (valArray.length - t); // → txt_counter 1 ... txtArray.length
    // textArray index increment...
    t += 1;
  }
  app.endUndoGroup();
};

wigBtn.onClick = function () {
  var aItem = app.project.activeItem;
  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length == 0) {
    showTabErr('layer not selected');
    return;
  }
  var wLayer;
  var wProp;
  var w = wig();
  var expFx = w[0];
  var expStr = w[1];

  app.beginUndoGroup('wig rig');

  for (i = 0; i < selLayers.length; i++) {
    wLayer = selLayers[i];
    wProp = wLayer.property(trmProp).property('ADBE Position');

    addPseudoEffect('wig', expFx);
    wProp.expression = expStr;
  }
  app.endUndoGroup();
};

ikBtn.onClick = function () {
  var aItem = app.project.activeItem;
  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  // error...
  if (selLayers.length != 3) {
    showTabErr('select 3 layers in order');
    return;
  }
  app.beginUndoGroup('simple ik');

  var bone1 = selLayers[0];
  var bone2 = selLayers[1];
  var bone3 = selLayers[2];

  bone2.parent = bone1;
  bone3.parent = bone2;

  var bone1Pos = bone1.property(trmProp).property('ADBE Position').value;
  var bone1Rot = bone1.property(trmProp).property('ADBE Rotate Z').value;
  var bone3Pos = bone3.property(trmProp).property('ADBE Position').value;
  var k = ik(bone1.name, bone2.name, bone3.name);
  var expFx = k[0];
  var expStr1 = k[1];
  var expStr2 = k[2];
  var expStr3 = k[3];
  var expStr4 = k[4];

  zeroLayer = aItem.layers.addShape();

  if (lDrop.selection == 0) {
    ctrlLayer = shpNull();
  } else {
    ctrlLayer = aItem.layers.addNull();
  }
  zeroLayer.moveBefore(bone3);
  zeroLayer.name = bone2.name + ' end';
  zeroLayer.guideLayer = true;
  zeroLayer.label = 2;
  zeroLayer.parent = bone3.parent;
  zeroLayer.property(trmProp).property('ADBE Position').setValue(bone3Pos);
  zeroLayer.locked = true;
  zeroLayer.shy = true;

  ctrlLayer.moveBefore(bone3);
  ctrlLayer.name = ctrlPrefix + bone3.name;
  ctrlLayer.guideLayer = true;
  ctrlLayer.label = 1;
  ctrlLayer.parent = bone3.parent;
  ctrlLayer.property(trmProp).property('ADBE Position').setValue(bone3Pos);
  ctrlLayer.parent = bone1.parent;
  ctrlLayer.parent = null;

  bone3.parent = null;

  addPseudoEffect('simple IK', expFx);
  bone1.property(trmProp).property('ADBE Rotate Z').expression = expStr1;
  bone2.property(trmProp).property('ADBE Rotate Z').expression = expStr2;
  bone3.property(trmProp).property('ADBE Position').expression = expStr3;
  bone3.property(trmProp).property('ADBE Rotate Z').expression = expStr4;

  if (bone1.property(trmProp).property('ADBE Rotate Z').value != bone1Rot) {
    ctrlLayer.property('ADBE Effect Parade').property('simple IK').property('flip orientation').setValue(true);
  }

  app.endUndoGroup();
};

typeAnimBtn.onClick = function () {
  var aItem = app.project.activeItem;
  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  var txtArray = [];
  
  app.beginUndoGroup('typewriter');

  if (selLayers.length == 0) {
    var cLayer = aItem.layers.addText('Lettering automático...');
    selLayers.push(cLayer);
  }

  for (var l = 0; l < selLayers.length; l++) {
    var content = textContent(selLayers[l]);
    
    if (content == '') continue;
    txtArray.push(content);
  }
  // the pseudo effect is applied to all selected layers at once (ADOBEs limitation);
  addPseudoEffect('typewriter',toolTypewriter);

  // textArray index... the textArray length may not match selLayers length... 
  var t = 0;
  for (var n = 0; n < selLayers.length; n++) {
    // layer...
    var nLayer = selLayers[n];

    if (!(nLayer instanceof TextLayer)) continue;
    // text document...
    var text2 = nLayer.property('ADBE Text Properties');
    var textDoc2 = text2.property('ADBE Text Document');
    var textDocVal2 = textDoc2.value;

    textDocVal2.justification = ParagraphJustification.LEFT_JUSTIFY;
    textDocVal2.text = txtArray[t];
    textDoc2.setValue(textDocVal2);

    selLayers[n].name = txtPrefix + 'lettering ' + (txtArray.length - t); // → txt_lettering 1 ... txtArray.length
    // textArray index increment...
    t += 1;
  }
  app.endUndoGroup();
};

wordsBtn.onClick = function () {
  var aItem = app.project.activeItem;
  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  var selLayers = aItem != null ? aItem.selectedLayers : [];
  var txtArray = [];
  
  app.beginUndoGroup('words');

  if (selLayers.length == 0) {
    var cLayer = aItem.layers.addText('Lettering automático...');
    selLayers.push(cLayer);
  }

  for (var l = 0; l < selLayers.length; l++) {
    var content = textContent(selLayers[l]);
    
    if (content == '') continue;
    txtArray.push(content);
  }
  // the pseudo effect is applied to all selected layers at once (ADOBEs limitation);
  addPseudoEffect('words',toolWords);

  // textArray index... the textArray length may not match selLayers length... 
  var t = 0;
  for (var n = 0; n < selLayers.length; n++) {
    // layer...
    var nLayer = selLayers[n];

    if (!(nLayer instanceof TextLayer)) continue;
    // text document...
    var text2 = nLayer.property('ADBE Text Properties');
    var textDoc2 = text2.property('ADBE Text Document');
    var textDocVal2 = textDoc2.value;

    textDocVal2.text = txtArray[t];
    textDoc2.setValue(textDocVal2);

    selLayers[n].name = txtPrefix + 'lettering ' + (txtArray.length - t); // → txt_lettering 1 ... txtArray.length
    // textArray index increment...
    t += 1;
  }
  app.endUndoGroup();
};

simpleBoxBtn.onClick = function() {

  var aItem = app.project.activeItem;
  // error...
  if (!(aItem instanceof CompItem)) {
    showTabErr('comp not selected');
    return;
  }
  var selLayers = aItem != null ? aItem.selectedLayers : [];

  if (selLayers.length == 0) {
    var cLayer = aItem.layers.addText('Tarja simples...');
    selLayers.push(cLayer);
  }

  for (var l = 0; l < selLayers.length; l++) {
    var layer = selLayers[l];
    // fx...
    var effects = layer.property('ADBE Effect Parade');
    // base effect...
    base_effects1 = effects.addProperty('ADBE Simple Choker');
    base_effects1.name = 'base';
    base_effects1.property('ADBE Simple Choker-0001').setValue(2);
    // margin effect...
    margin_effects1 = effects.addProperty('ADBE Minimax');
    margin_effects1.name = 'margin';
    margin_effects1.property('ADBE Minimax-0002').setValue(20);
    margin_effects1.property('ADBE Minimax-0003').setValue(6);
    // colors effect...
    colors_effects1 = effects.addProperty('ADBE Tint');
    colors_effects1.name = 'colors';
    colors_effects1.property('ADBE Tint-0001').setValue([35/255,30/255,30/255,1]);
    colors_effects1.property('ADBE Tint-0002').setValue([238/255,1,140/255,1]);
  }
};

/*

---------------------------------------------------------------
> 🗃️ project tab events
---------------------------------------------------------------

*/

projUserTxt.onChange = function () {
  userPrefix = projUserTxt.text.toUpperCase();
  savePreferences();
};

insertUserIdBtn.onClick = function () {
  // error...
  if (app.project.numItems == 0) {
    showTabErr('empty project');
    return;
  }
  userPrefix = projUserTxt.text.toUpperCase().replaceSpecialCharacters();
  projId = projIdTxt.text.toUpperCase().replaceSpecialCharacters();
  projUserTxt.text = userPrefix;
  projIdTxt.text = projId;

  var baseName = userPrefix + ' PROMO - ' + projId;
  var itemArray = [];

  app.beginUndoGroup('quick rename ID');

  for (k = 1; k <= app.project.numItems; k++) {
    var aItem = app.project.item(k);

    if (aItem.selected == true && aItem instanceof CompItem) {
      itemArray.push(aItem);
    }
  }
  for (c = 0; c < itemArray.length; c++) {
    var qItem = itemArray[c];
    qItem.name = qItem.name.replace(compPrefix, '');
    qItem.name = qItem.name.replace(/^.*\w{3}\d{6}[\s\_]*/, '');
    qItem.name = qItem.name.replaceSpecialCharacters();
    qItem.name = baseName + ' ' + qItem.name;

    if (qItem.comment == '') {
      qItem.comment = 'export: true';
    }
  }
  app.endUndoGroup();
};

renameItemBtn.onClick = function () {
  // error...
  if (app.project.numItems == 0) {
    showTabErr('empty project');
    return;
  }
  userPrefix = projUserTxt.text.toUpperCase().replaceSpecialCharacters();
  projId = projIdTxt.text.toUpperCase().replaceSpecialCharacters();
  projName = projNameTxt.text.toLowerCase().replaceSpecialCharacters();
  projUserTxt.text = userPrefix;
  projIdTxt.text = projId;
  projNameTxt.text = projName;

  var sysDate = system.callSystem('cmd.exe /c date /t');
  var dateStr = sysDate.substring(0, sysDate.length - 3);
  var compsArray = app.project.selection.length > 0 ? app.project.selection : getCompsAndTemplates();
  app.beginUndoGroup('quick rename');

  renameComps(projId, projName, compsArray);
  setXMPdata('creator', system.userName);
  setXMPdata('date', dateStr);
  setXMPdata('identifier', projId);
  setXMPdata('title', projName);

  app.endUndoGroup();
};

tagBtn.onClick = function () {
  if (app.project.numItems == 0) {
    return;
  }
  tagDialog();
};

projOrgBtn.onClick = function () {
  if (app.project.numItems == 0) {
    return;
  }
  app.beginUndoGroup('quick project organization');

  removeProjFolders();
  deleteEmptyFolders();
  populateFolders();
  deleteEmptyFolders();

  app.endUndoGroup();
};

saveBtn.onClick = function () {
  userPrefix = projUserTxt.text.toUpperCase().replaceSpecialCharacters();
  projId = projIdTxt.text.toUpperCase().replaceSpecialCharacters();
  projName = projNameTxt.text.toLowerCase().replaceSpecialCharacters();
  projUserTxt.text = userPrefix;
  projIdTxt.text = projId;
  projNameTxt.text = projName;

  var saveFolder = Folder.selectDialog();
  var userStr = system.userName;
  var sysDate = system.callSystem('cmd.exe /c date /t');
  var dateStr = sysDate.substring(0, sysDate.length - 3);
  var appV = parseInt(app.buildName.substring(0,2));

  setXMPdata('creator', userStr);
  setXMPdata('date', dateStr);
  setXMPdata('identifier', projId);
  setXMPdata('title', projName);

  app.beginUndoGroup('quick save');

  if (saveFolder != null) {
    var savePath = saveFolder.fullName + '/';
    var projFolder = saveFolder;
    var projPath = savePath;
    var projFullName = projId + ' ' + projName;
    var projFile = new File(projPath + projFullName);
    app.project.save(projFile);

    if (collectTogBtn.value) {
      // collect files...
      app.executeCommand(2482);
    }
  }

  if (appV > 22) {
    executeCommandID('Save a Copy As 22.x...');
    return;
  }
};

pngPreviewBtn.onClick = function () {
  var aItem = app.project.activeItem;

  if (aItem == null) {return;}

  var saveFolder = Folder.selectDialog();

  if (saveFolder == null) {return;}

  var savePath = saveFolder.fullName + '/';
  var previewPath = savePath + aItem.name + ' preview.png';
  var previewFile = new File(previewPath);

  aItem.saveFrameToPng(aItem.time, previewFile);
  // var setClipboard = 'Get-Content \'' + previewPath + '\' | Set-Clipboard';
  // var cmdStr = 'cmd.exe /c powershell.exe -c "' + setClipboard + '"';
  // system.callSystem(cmdStr);
  openFolder(savePath);
};

/*
  
  ---------------------------------------------------------------
  > ✌️ app tab events
  ---------------------------------------------------------------
  
  */

importAetBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  // github main repo...
  var url = repoURL + '/raw/main/downloads/templates.zip';

  var downPath = scriptPreferencesPath + '/temp';
  var downFolder = new Folder(downPath);
  var zipPath = downPath + '/templates.zip';
  var templatesPath = scriptPreferencesPath + '/templates';
  var templatesFolder = new Folder(templatesPath);

  if (!downFolder.exists) {
    downFolder.create();
  }
  if (!templatesFolder.exists || templatesFolder.getFiles().length == 0) {
    getURLContent([url], [downPath]);
    unzipContent(zipPath, templatesPath);
  }
  templateDialog(templatesPath);
};

zipTemplatesBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  var templatesPath = scriptPreferencesPath + '/templates';
  var templatesFolder = new Folder(templatesPath);
  // dev folder path '[user name]/PROMO-GNEWS-script'...
  var destPath = Folder.myDocuments.parent.toString() + '/PROMO-GNEWS-script';
  var devFolder = new Folder(destPath);

  if (templatesFolder.exists) {
    var templatesStr = templatesFolder.getFiles().toString();
    // replaces '[' at the start and ']' at the end...
    templatesStr = templatesStr.replace(/^\[|\]$/, '');
    templatesStr = templatesStr.replace(/\,/g, "', '");
    templatesStr = decodeURI(templatesStr);

    if (!devFolder.exists) {
      // alternative path 1 'desktop'...
      destPath = Folder.desktop.toString();
    }

    var zipPath = destPath + '/templates.zip';
    zipContent(templatesStr, zipPath);
    openFolder(destPath);
  }
};

copyAMEPresetsBtn.addEventListener('click', function (c) {
  if (c.button == 2) {
    // error...
    if (!netAccess()) {
      showTabErr(netConfigName + ' not checked');
      return;
    }
    var templatesAMEPath = scriptPreferencesPath + '/AME presets';
    var templatesAMEFolder = new Folder(templatesAMEPath);

    if (!templatesAMEFolder.exists) {
      templatesAMEFolder.create();
    }
    openFolder(templatesAMEPath);
  }
});

copyAMEPresetsBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  var url = repoURL + '/raw/main/downloads/AME.zip';

  var downPath = scriptPreferencesPath + '/temp';
  var downFolder = new Folder(downPath);
  var amePath = '~/Documents/Adobe/Adobe Media Encoder';
  var ameFolder = new Folder(amePath);
  var vFolders = ameFolder.getFiles();

  var zipPath = downPath + '/AME.zip';
  var unzipPath = scriptPreferencesPath + '/AME presets';

  if (!downFolder.exists) {
    downFolder.create();
  }
  getURLContent([url], [downPath]);
  unzipContent(zipPath, unzipPath);

  for (var i = 0; i < vFolders.length; i++) {
    var presetsAMEPath = decodeURI(vFolders[i]).toString() + '/Presets';
    var presetsAMEFolder = new Folder(presetsAMEPath);

    if (presetsAMEFolder.exists) {
      try {
        copyFolderContent(unzipPath, presetsAMEPath);
      } catch (error) {}
    }
  }
  removeFolder(downFolder); // → delete temp folder
};

zipFontsBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  var fontsPath = scriptPreferencesPath + '/fonts';
  var fontsFolder = new Folder(fontsPath);
  // dev folder path '[user name]/PROMO-GNEWS-script'...
  var destPath = Folder.myDocuments.parent.toString() + '/PROMO-GNEWS-script';
  var devFolder = new Folder(destPath);

  if (fontsFolder.exists) {
    var fontsStr = fontsFolder.getFiles().toString();
    // replaces '[' at the start and ']' at the end...
    fontsStr = fontsStr.replace(/^\[|\]$/, '');
    fontsStr = fontsStr.replace(/\,/g, "', '");
    fontsStr = decodeURI(fontsStr);

    if (!devFolder.exists) {
      // alternative path 1 'desktop'...
      destPath = Folder.desktop.toString();
    }

    var zipPath = destPath + '/fonts.zip';
    zipContent(fontsStr, zipPath);
    openFolder(destPath);
  }
};

installFontsBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  // github main repo...
  var url = repoURL + '/raw/main/downloads/fonts.zip';

  var downPath = scriptPreferencesPath + '/temp';
  var downFolder = new Folder(downPath);
  var zipPath = downPath + '/fonts.zip';
  var fontsPath = scriptPreferencesPath + '/fonts';
  var fontsFolder = new Folder(fontsPath);

  if (!downFolder.exists) {
    downFolder.create();
  }
  if (!fontsFolder.exists || fontsFolder.getFiles().length == 0) {
    getURLContent([url], [downPath]);
    unzipContent(zipPath, fontsPath);
  }
  fontsDialog();
};

endPagePresetBtn.onClick = function () {
  currentGrp = menuGrp;
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  endPagePresetDialog();
};

/*
  
---------------------------------------------------------------
> 🔗 links tab events
---------------------------------------------------------------

*/

emailBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  var site = 'https://outlook.office365.com/mail/';

  openWebSite(site);
};

oneDriveBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  var site = 'https://tvglobocorp-my.sharepoint.com/';

  openWebSite(site);
};

sharePointBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  var site = 'https://tvglobocorp.sharepoint.com/sites/IlhadeEdioPromo_GNews/Documentos%20Compartilhados/Forms/AllItems.aspx';

  openWebSite(site);
};

trelloBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  var site = 'https://trello.com/promo126/home';

  openWebSite(site);
};

typeFormBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  var site = 'https://tvglobo.typeform.com/to/wiqX4z0X';

  openWebSite(site);
};

plannerBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  var site = 'https://tasks.office.com/tvglobocorp.onmicrosoft.com/en-US/Home/Planner/#/userboard';

  openWebSite(site);
};

mamHardNewsBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  openFolder(hnPath);
};

// right click -> configure 'MAM - magazine' path...
mamMagBtn.addEventListener('click', function (c) {
  if (c.button == 2) {
    // error...
    if (!netAccess()) {
      showTabErr(netConfigName + ' not checked');
      return;
    }
    var saveFolder = Folder.selectDialog();

    if (saveFolder != null) {
      magazinePath = decodeURI(saveFolder).toString();
      savePreferences();
    }
  }
});

mamMagBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  openFolder(magazinePath);
};

// right click -> configure 'MAM - para arte' path...
mamArteBtn.addEventListener('click', function (c) {
  if (c.button == 2) {
    // error...
    if (!netAccess()) {
      showTabErr(netConfigName + ' not checked');
      return;
    }
    var saveFolder = Folder.selectDialog();

    if (saveFolder != null) {
      artePath = decodeURI(saveFolder).toString();
      savePreferences();
    }
  }
});

mamArteBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  openFolder(artePath);
};

nUtilsBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  var fld = new Folder(utiPath);
  if (!fld.exists) {
    showTabErr('this folder is not accessible...');
    return;
  }
  openFolder(folderPath);
};

/*

---------------------------------------------------------------
> ⚙️ dev tab events
---------------------------------------------------------------

*/

binBtn.onClick = function () {
  bin();
};

/*

---------------------------------------------------------------
> ⚙️ preferences tab events
---------------------------------------------------------------

*/

lDrop.onChange = function () {
  layerType = lDrop.selection.index;
  savePreferences();
};

projTemplateDrop.onChange = function () {
  projectModel = projTemplateDrop.selection.index;
  savePreferences();
};

colorDrop.onChange = function () {
  var c = tabColors[colorDrop.selection.index];
  setBtnColor(tabColorBtn, c);
  tabColorBtn.notify('onDraw');
};

tabColorBtn.onClick = function () {
  var c = tabColors[colorDrop.selection.index];
  var binColor = eval(rgbToHex(c));
  var configColor = $.colorPicker(binColor);

  if (configColor != -1) {
    configColor = rgbStr(configColor);
    setBtnColor(tabColorBtn, eval(configColor));
    tabColors[colorDrop.selection.index] = eval(configColor);
    savePreferences();
  }
};

// right click -> opens the git repo...
updateBtn.addEventListener('click', function (c) {
  if (c.button == 2) {
    // error...
    if (!netAccess()) {
      showTabErr(netConfigName + ' not checked');
      return;
    }
    openWebSite(repoURL);
  }
});

updateBtn.onClick = function () {
  // error...
  if (!netAccess()) {
    showTabErr(netConfigName + ' not checked');
    return;
  }
  var downPath = scriptPreferencesPath + '/ScriptUI Panels';
  var pathArray = [];

  for (var i = 0; i < codeURLArray.length; i++) {
    pathArray.push(downPath);
  }
  var downFolder = new Folder(downPath);
  var scriptUIPath = new File($.fileName).path.toString();
  var destPathArray = [
    scriptUIPath, // → Scripts/Script UiPanels
    promoArcPath + '/scripts', // → /arquivamento/GLOBONEWS/On Air 2022/Promo/scripts
    promoInsPath + '/BARRA UTILIDADES PROMO PARA SCRIPT' // → UTILIDADES//FERRAMENTAS/SCRIPTS/SCRIPTS AFX/BARRA UTILIDADES PROMO PARA INSTALAR
  ];

  if (!downFolder.exists) {
    downFolder.create();
  }
  getURLContent(codeURLArray, pathArray);

  for (var p = 0; p < destPathArray.length; p++) {

    try {
      copyFolderContent(downPath, destPathArray[p]);

    } catch (error) {}
  }

  showTabProg('and run the script  ヽ(✿ﾟ▽ﾟ)ノ');
};

/*

---------------------------------------------------------------
> ❌ close group events
---------------------------------------------------------------

*/

closeBtn.onClick = function () {
  GNEWS_LOGO.visible = true;
  closeBtn.visible = true;
  prefGrp.visible = true;
  closeErrBtn.visible = false;
  menuGrp.visible = true;
  bgColor = tabColors[0];
  errImgGrp.visible = false;

  hideTabs();
  setBgColor(w, bgColor);
};

closeErrBtn.onClick = function () {
  GNEWS_LOGO.visible = true;
  closeBtn.visible = true;
  closeErrBtn.visible = false;
  errImgGrp.visible = false;

  clearOutput();
  hideTabs();
  openTab();
};
